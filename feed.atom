<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
  <title>P programming</title>
  <subtitle>Example Company Tagline</subtitle>
  <id>https://p-program.github.io/</id>
  <author>
    <name>P programming</name>
    <uri>https://p-program.github.io/</uri>
  </author>
  <icon>https://p-program.github.io/image/brand/icon-1-1.png</icon>
  <logo>https://p-program.github.io/image/brand/icon-2-1.png</logo>
  <updated>2020-03-27T02:40:17Z</updated>
  <link rel="self" type="application/atom+xml" href="https://p-program.github.io/feed.atom" hreflang="en-us"/>
  <link rel="alternate" type="text/html" href="https://p-program.github.io/" hreflang="en-us"/>
  <entry>
    <title>唯物主义最扯淡的地方</title>
    <author>
      <name>p-program</name>
      <uri>https://github.com/p-program</uri>
    </author>
    <id>https://p-program.github.io/bullshitmaterialism/</id>
    <updated>2020-03-27T01:26:58Z</updated>
    <published>2020-03-27T01:26:58Z</published>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;人从哪里来，我是谁，我要去哪？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天突然想起我的高中政治老师，我觉得她讲课水平实在是不行。今天，让我来讲讲什么是哲学吧。&lt;/p&gt;
&lt;p&gt;我们通常认为，语言是一套符号系统。那他既然是符号系统，就必定存在缺陷。所以每一套系统都只能解决特定的问题。哲学依附于语言以上，所以哲学必定是一套有缺陷的系统。&lt;/p&gt;
&lt;p&gt;OK，你觉得这样的推论很扯淡。那我们就来讲讲基本问题。&lt;/p&gt;
&lt;h2&gt;基本问题&lt;/h2&gt;
&lt;p&gt;唯物论：&lt;strong&gt;意识的第一性，物质的第二性。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;唯心论：&lt;strong&gt;物质的第一性，意识的第二性。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以物质为第一性发展的世界，就是目前这个近现代。这个世界的问题在于消费主义横行，大家明明都很有钱，很物质，但个个都过得不太开心，不太幸福。&lt;/p&gt;
&lt;p&gt;我们第一代领袖说：“应该是一元论”。那么，我们把唯物主义辩证法简单理解为对立统一规律，那么这个规律，其实已经否定了唯物主义本身。你唯物论说了嘛，&lt;strong&gt;物质是第一性，意识是第二性&lt;/strong&gt;。但是你自己又统一不了物质和意识，粗暴地把他们割裂开来，排资论辈，把意识放在后面。当你认为物质占第一主导的时候，你早就已经违背了你自身的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;一切存在的事物都由既相互对立、又相互统一的一对矛盾组合而成&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;唯物主义视万物为草芥，唯心主义强调唯吾独尊。但是他们的问题在于他们本身的定义就是问题。&lt;/p&gt;
&lt;p&gt;在唯物主义的社会里，会看到这样一个有趣现象：大家都以有钱作为终极目标（可笑的是，钱永远是不够用的，不然社会就停摆了），各种刷卡消费买买买，结果夜深人静的时候，内心却空虚得要命；&lt;/p&gt;
&lt;p&gt;在唯心主义的社会，过于注重个人的表达。如果你在美国的学校读书，某天你心血来潮去学校艺术节唱歌，即便你唱得再跑调，你的同学也会拼命鼓掌，因为在他们的文化里面，强调的是个人的表达这些很虚的事情。&lt;/p&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;《易传·系辞上传》:&lt;/p&gt;
&lt;p&gt;“易有太极，是生两仪，两仪生四象，四象生八卦。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我不知道自己从哪而来。我知道的是，在神的世界里，我就是人，所以我的时间有限；在我的世界里，我就是神，我有限的时间即为永恒。&lt;/p&gt;
&lt;p&gt;人不能同时踏入同一条河流。说得这么无聊，不过就是，分手了，你不要去找你前任嘛。&lt;/p&gt;
&lt;p&gt;为啥不要去找你前任呢，因为随着时间的推移，TA也不是你以前想象的那个人，而你自己也变了。&lt;/p&gt;
&lt;h2&gt;参考链接&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;https://zh.wikipedia.org/wiki/%E5%94%AF%E5%BF%83%E4%B8%BB%E7%BE%A9&lt;/li&gt;
&lt;li&gt;https://zh.wikipedia.org/wiki/%E5%94%AF%E7%89%A9%E8%BE%AF%E8%AD%89%E6%B3%95&lt;/li&gt;
&lt;li&gt;https://zh.wikipedia.org/zh/%E5%94%AF%E7%89%A9%E4%B8%BB%E4%B9%89&lt;/li&gt;
&lt;/ol&gt;</content>
  </entry>
  <entry>
    <title>皮之三重境界</title>
    <author>
      <name>p-program</name>
      <uri>https://github.com/p-program</uri>
    </author>
    <id>https://p-program.github.io/p-programer/</id>
    <updated>2020-03-24T04:03:42Z</updated>
    <published>2020-03-24T04:03:42Z</published>
    <content type="html">&lt;p&gt;古人曾经没有这么云过：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人之初，性本善，性相近，皮相远。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说，人的皮性各有不同。有的不皮，有的很皮，更有甚者，皮成了仙。&lt;/p&gt;
&lt;p&gt;古今之成大事业、大皮学家(p-programer)，罔不经过三种之境界：&lt;/p&gt;
&lt;h2&gt;昨夜西风凋碧树。独上高楼，皮尽天涯路&lt;/h2&gt;
&lt;p&gt;皮于表象，俗称皮皮虾。
皮皮虾经常出没于各大社群，常用句式有&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;21 天学会 C&#43;&#43;&lt;/li&gt;
&lt;li&gt;PHP 是最好的语言&lt;/li&gt;
&lt;li&gt;C 语言从入门到放弃&lt;/li&gt;
&lt;li&gt;Java 是门啰嗦的语言&lt;/li&gt;
&lt;li&gt;老子就是死也不优化JVM&lt;/li&gt;
&lt;li&gt;机器学习真的不是统计学&lt;/li&gt;
&lt;li&gt;go 是云原生开发第一语言&lt;/li&gt;
&lt;li&gt;没过几年就要跟微软学新语言&lt;/li&gt;
&lt;li&gt;学 Python 要先买一把游标卡尺&lt;/li&gt;
&lt;li&gt;JavaScript 就是一把没有刀柄的剑&lt;/li&gt;
&lt;li&gt;请不要把区块链当成收割韭菜的有效工具&lt;/li&gt;
&lt;li&gt;swift 是那个跟男朋友分手后就写歌的女歌手吗&lt;/li&gt;
&lt;li&gt;object-c 是被 Taylor Alison Swift 抛弃的备胎吗
&lt;img src=&#34;/image/post/p-programer/p-army.jpg&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;衣带渐宽终不悔，为伊皮得人憔悴&lt;/h2&gt;
&lt;p&gt;经过第一重境界的轮回以后，皮皮虾顿悟了编程的奥义在于认清了口袋里的银子之后，依然要靠他们恰饭。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上善若皮，皮善覆万物而不争，处众人之所恶（wù），故几于道。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以他化用了各家武功，形成了自己的独特武林绝学：&lt;strong&gt;医院挂号&lt;/strong&gt;。
&lt;img src=&#34;/image/post/p-programer/p-immortal.jpg&#34; alt=&#34;&#34;&gt;
终不得治，谥号皮成仙。&lt;/p&gt;
&lt;h2&gt;众里寻他千百度，蓦然回首，那人皮在灯火阑珊处&lt;/h2&gt;
&lt;p&gt;皮成神，简称皮神，皮卡丘。&lt;/p&gt;
&lt;p&gt;皮神是不属于人类的存在。它不呆在精灵球里，所以是不被束缚的存在。无法被观测，更无法被捕捉。其存在是一种传说。&lt;/p&gt;
&lt;p&gt;皮即可爱，皮即正义，皮即世界。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/p-programer/p-detective.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>The Seed Of Robot —— Intelligent API Gateway</title>
    <author>
      <name>p-program</name>
      <uri>https://github.com/p-program</uri>
    </author>
    <id>https://p-program.github.io/the-seed-of-robot/</id>
    <updated>2020-03-21T12:56:37Z</updated>
    <published>2020-03-21T12:56:37Z</published>
    <content type="html">&lt;h2&gt;冯·诺依曼结构的缺陷&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;数学家冯·诺依曼提出了计算机制造的三个基本原则，即采用二进制逻辑、程序存储执行以及计算机由五个部分组成（运算器、控制器、存储器、输入设备、输出设备），这套理论被称为冯·诺依曼体系结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;计算程序发展到现在，基本的架构从来未曾改变。无非是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;input --&amp;gt; process --&amp;gt; output&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;电脑输入--&amp;gt; 程序处理 --&amp;gt; 结果导出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但这套体系一直都是有缺陷的。比如在这套体系里面，一直都无法解决精度缺失的问题，不管你怎么多线程，结果也是串行执行。&lt;/p&gt;
&lt;p&gt;这是一套相当落后的架构，但我们不得不使用他。并在他基础上逐渐改进，直至新的技术突破。&lt;/p&gt;
&lt;h2&gt;下一代机器人架构&lt;/h2&gt;
&lt;p&gt;按照 &lt;a href=&#34;https://github.com/p-program/The-Seed&#34;&gt;The-Seed&lt;/a&gt; 理念设计的机器人，架构应当是这样的：&lt;/p&gt;
&lt;p&gt;Input:&lt;/p&gt;
&lt;p&gt;手机输入，键盘输入，语音输入，意念输入&lt;/p&gt;
&lt;p&gt;Process:&lt;/p&gt;
&lt;p&gt;程序的处理逻辑。&lt;/p&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;p&gt;程序的应答&lt;/p&gt;
&lt;p&gt;Influence:&lt;/p&gt;
&lt;p&gt;程序的应答对我们的影响&lt;/p&gt;
&lt;h2&gt;现行框架下的解&lt;/h2&gt;
&lt;p&gt;我们就只挑&lt;code&gt;Process&lt;/code&gt;来讲吧。按照&lt;a href=&#34;https://github.com/p-program/The-Seed/blob/master/world.md&#34;&gt;世界的定义&lt;/a&gt;，如果世界是不可解的，那么我们把分解为一个可解的世界就行。&lt;/p&gt;
&lt;p&gt;制造泛用性机器人是我们最终的目标，但我们可以先从解决特定可解问题入手。&lt;/p&gt;
&lt;p&gt;比如，我要造一个文档机器人，基于我的文档仓库问答。这个文档是这么定义的:&lt;/p&gt;
&lt;p&gt;文件名是&lt;code&gt;kubernetes.md&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;内容是&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;# 六 集群故障管理
## 6.1 节点问题
### 6.1.3  ImageGCFailed
&amp;gt; 
&amp;gt;   kubelet 可以清除未使用的容器和镜像。kubelet 在每分钟和每五分钟分别回收容器和镜像。
&amp;gt; 
&amp;gt;   [配置 kubelet 垃圾收集](https://k8smeetup.github.io/docs/concepts/cluster-administration/kubelet-garbage-collection/)
但是 kubelet 的垃圾回收有个问题,它只能回收那些未使用的镜像,有点像 `docker system prune`,然而观察发现,那些死掉的容器不是最大的问题,正在运行的容器才是更大的问题.如果ImageGCFailed一直发生,而容器使用的ephemeral-storage/hostpath(宿主目录)越发增多,最终将会导致更严重的DiskPressure问题,波及节点上所有容器.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这个问题里面，&amp;quot;kubernetes.md&amp;quot; 就是&amp;quot;世界&amp;quot;。这个世界解决了故障处理的可解子问题。&lt;/p&gt;
&lt;p&gt;那么当我向机器人提问&lt;code&gt;ImageGCFailed&lt;/code&gt;的时候，机器人认识到了这是 &amp;quot;kubernetes.md&amp;quot; 的问题，略微检索（elasticsearch），便能变成答案。&lt;/p&gt;
&lt;p&gt;“ML科学家”就不服了，他说你怎么知道机器人知道答案呢？&lt;/p&gt;
&lt;p&gt;其实答案也非常的简单。“继续分割这个世界，直至不能再分割”。问题不能解决，那就把它再分解，再特殊化一点。&lt;/p&gt;
&lt;p&gt;举个例子。我们用浏览器访问&lt;a href=&#34;https://help.aliyun.com/product/85222.html&#34;&gt;阿里云的容器服务Kubernetes版&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;实际上我们已经进入了 &lt;code&gt;Kubernetes&lt;/code&gt; 这一个世界，我们所问的问题，只会跟 &lt;code&gt;Kubernetes&lt;/code&gt; 这个产品相关联。&lt;/p&gt;
&lt;p&gt;所以，按照的现行技术框架下，这个问答机器人是这样的：&lt;/p&gt;
&lt;p&gt;文档消费者：&lt;/p&gt;
&lt;p&gt;文本输入 --&amp;gt; 机器人微服务 --&amp;gt; 检索已有数据（elasticsearch）&lt;/p&gt;
&lt;p&gt;文档生产者：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone&lt;/code&gt;文档仓库 --&amp;gt; 程序结构化文档，将死的数据转换为可被理解并检索的数据，比如导入 elasticsearch。&lt;/p&gt;
&lt;p&gt;我们可以把所有阿里云产品的文档都丢到这个 elasticsearch 里面，一个产品一个 index。也可以分开做。&lt;/p&gt;
&lt;p&gt;这个结果看起来很不“智能”，并且很简陋。但关键在于各个组件之间可以替换，而且最关键的文档部分可以扩展（多个消息源采集器，导入elasticsearch）。面向终端的目前只是一个钉钉机器人，但这个机器人对应的后端微服务是可以替换的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;You can you up.No can&#39;t BB&lt;/code&gt;。不要妄想制造一台万能机器，先解决能解决的问题就行。时机成熟之后再替换。&lt;/p&gt;
&lt;p&gt;最终AI的客户端将会得到进化，他现在只是一个web接口，但是他可以升级成一个客户端，一个app，甚至一台手机，一个机器人。&lt;/p&gt;
&lt;p&gt;等我有心情了，再开发出来这个钉钉机器人吧，哈哈。&lt;/p&gt;
&lt;h2&gt;理想架构&lt;/h2&gt;
&lt;p&gt;手机输入，键盘输入，语音输入，意念输入
--&amp;gt;
微服务查找（计算资源即微服务，计算资源包括人和计算机）
--&amp;gt;
调用计算资源完成计算&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--&amp;gt;&lt;/code&gt; 表示数据的流动，是一种世界通讯的协议。&lt;/p&gt;
&lt;p&gt;微服务查找是一个拓展的概念，查找的结果基于搜索因子呈现，基于质量排序。比如，海贼王临死前留下了 &lt;code&gt;One Piece&lt;/code&gt;，只留给找到它的人。各路豪杰纷纷响应，世界由此进入大航海时代。&lt;/p&gt;
&lt;p&gt;调用微服务不一定只调用一个，我们可以并发地调用多个微服务，&lt;code&gt;One Piece&lt;/code&gt; 只留给最快找到它的人。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/The-Seed-Of-Robot/one-piece.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2&gt;TODO&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;表达能力更强的程序语言&lt;/li&gt;
&lt;li&gt;新的世界级通讯协议&lt;/li&gt;
&lt;li&gt;VR技术&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考链接&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;http://www.yinwang.org/blog-cn/2018/04/13/computer-science&lt;/li&gt;
&lt;li&gt;https://baike.baidu.com/item/%E5%86%AF%C2%B7%E8%AF%BA%E4%BE%9D%E6%9B%BC%E7%BB%93%E6%9E%84&lt;/li&gt;
&lt;/ol&gt;</content>
  </entry>
  <entry>
    <title>How To Do In Java</title>
    <author>
      <name>p-program</name>
      <uri>https://github.com/p-program</uri>
    </author>
    <id>https://p-program.github.io/howtodoinjava/</id>
    <updated>2020-03-20T05:53:29Z</updated>
    <published>2020-03-20T05:53:29Z</published>
    <content type="html">&lt;p&gt;The point is to break the rule everyday.&lt;/p&gt;
&lt;h2&gt;Use Java 8 till the world ends&lt;/h2&gt;
&lt;p&gt;2032：I still use Java 8.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/HowToDoInJava/java-release.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Write once,run nowwhere&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/HowToDoInJava/write-once.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Use maven rather than gradle, install tons of dependencies even you just wanna hello world&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.2.4.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.2.4.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-beans --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-beans&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.2.4.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-web --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-web&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.2.4.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.2.4.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-test --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-test&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.2.4.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aop --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-aop&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.2.4.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.2.3.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
&amp;lt;/dependency&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;JVM is great！&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/HowToDoInJava/jvm.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2&gt;JVM optimization&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/HowToDoInJava/jvm-memory.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/acs/user/monitoragent/jre/bin/java -server 
-Xmx128m 
-Xms128m 
-Xmn70m 
-XX:SurvivorRatio=10 
-XX:PermSize=25m 
-XX:MaxPermSize=30m 
-XX:&#43;DisableExplicitGC 
-XX:&#43;UseConcMarkSweepGC 
-XX:&#43;CMSParallelRemarkEnabled 
-XX:&#43;UseCMSCompactAtFullCollection 
-XX:&#43;CMSClassUnloadingEnabled 
-XX:LargePageSizeInBytes=128m 
-XX:&#43;UseFastAccessorMethods 
-XX:&#43;UseCMSInitiatingOccupancyOnly 
-XX:CMSInitiatingOccupancyFraction=70 
-XX:&#43;UseParNewGC 
-verbose:gc 
-Xloggc:/acs/monitor/system/monitoragent/logs/gc.log 
-XX:&#43;PrintGCDetails 
-XX:&#43;PrintGCDateStamps 
-Duser.timezone=GMT&#43;8 
-Djava.endorsed.dirs= 
-classpath /acs/user/monitoragent/lib:/acs/user/monitoragent/lib/aliyun-openservices-sls-v0.3-inner-0.1.0.jar:/acs/user/monitoragent/lib/aliyun-openservices-with-mqs.1.0.12.jar:/acs/user/monitoragent/lib/commons-beanutils-1.8.3.jar:/acs/user/monitoragent/lib/commons-codec-1.4.jar:/acs/user/monitoragent/lib/commons-collections-3.2.1.jar:/acs/user/monitoragent/lib/commons-digester-1.8.jar:/acs/user/monitoragent/lib/commons-httpclient-3.1.jar:/acs/user/monitoragent/lib/commons-lang-2.6.jar:/acs/user/monitoragent/lib/commons-lang3-3.1.jar:/acs/user/monitoragent/lib/commons-logging-1.0.4.jar:/acs/user/monitoragent/lib/commons-validator-1.4.0.jar:/acs/user/monitoragent/lib/diamond-client-3.6.7.jar:/acs/user/monitoragent/lib/diamond-utils-3.1.3.jar:/acs/user/monitoragent/lib/ezmorph-1.0.6.jar:/acs/user/monitoragent/lib/fastjson-1.2.41.jar:/acs/user/monitoragent/lib/hamcrest-core-1.1.jar:/acs/user/monitoragent/lib/httpclient-4.2.1.jar:/acs/user/monitoragent/lib/httpcore-4.2.1.jar:/acs/user/monitoragent/lib/jackson-core-lgpl-1.9.6.jar:/acs/user/monitoragent/lib/jackson-mapper-lgpl-1.9.6.jar:/acs/user/monitoragent/lib/jdom-1.1.jar:/acs/user/monitoragent/lib/json-lib-2.4-jdk15.jar:/acs/user/monitoragent/lib/junit-4.10.jar:/acs/user/monitoragent/lib/log4j-1.2.17.jar:/acs/user/monitoragent/lib/mysql-connector-java-5.1.25.jar:/acs/user/monitoragent/lib/netty-all-4.0.36.Final.jar:/acs/user/monitoragent/lib/nginx.agent.jar:/acs/user/monitoragent/lib/ons-api-1.1.5.jar:/acs/user/monitoragent/lib/ons-client-1.1.5.jar:/acs/user/monitoragent/lib/protobuf-java-2.4.1.jar:/acs/user/monitoragent/lib/rocketmq-client-3.6.4.jar:/acs/user/monitoragent/lib/rocketmq-common-3.6.4.jar:/acs/user/monitoragent/lib/rocketmq-remoting-3.6.4.jar:/acs/user/monitoragent/lib/slf4j-api-1.7.5.jar:/acs/user/monitoragent/lib/slf4j-log4j12-1.7.5.jar:/acs/user/monitoragent/lib/test.junit-4.8.1.jar:/acs/user/monitoragent/lib/test.junit.hamcrest-1.1.jar: -Dagent.home=/acs/user/monitoragent com.alibaba.ace.nginx.agent.Startup /acs/user/monitoragent/conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More options, more KPI, more salary jobs!&lt;/p&gt;
&lt;h2&gt;Object boxing and unboxing&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  public static void f() {
        String[] a = new String[2];
        Object[] b = a;
        a[0] = &amp;quot;hi&amp;quot;;
        b[1] = Integer.valueOf(42);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Return in finally&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    static String a() {
        try {
            throw new RuntimeException(&amp;quot;a&amp;quot;);
        } catch (RuntimeException e) {
            return &amp;quot;d&amp;quot;;
        } catch (Exception e) {
            return &amp;quot;b&amp;quot;;
        } finally {
            return &amp;quot;c&amp;quot;;
        }
//        return &amp;quot;d&amp;quot;;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Use ==&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;        String s1 = new String(&amp;quot;cccc&amp;quot;);
        String s2 = new String(&amp;quot;cccc&amp;quot;);
        if(s1==s2){
            goto hell;
        }

        Integer a =127;
        Integer b = 127;
        System.out.println(a==b);//true

        Integer a1 = 128;
        Integer b1 = 128;
        System.out.println(a1==b1);//false
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Use / as much as you can&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.util.Scanner;
public class Exercise1 {
       public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        System.out.print(&amp;quot;Input an integer number: &amp;quot;);
        int n = in.nextInt();  		
        if (n &amp;lt;= 0) {
            System.out.print(&amp;quot;Input a correct number.&amp;quot;);
        }
		int x = 0;
        while (n != 1) {
            if (n % 5 == 0) {
                n /= 5;
            } else if (n % 3 == 0) {
                n /= 3;
            } else if (n % 2 == 0) {
                n /= 2;
            } else {
                System.out.print(&amp;quot;It is not an ugly number.&amp;quot;);
				x = 1;
				break;
            }
        }
        if (x==0)
		System.out.print(&amp;quot;It is an ugly number.&amp;quot;);
		System.out.print(&amp;quot;\n&amp;quot;);
	    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/HowToDoInJava/java-number-exercise-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Object.toString is awsome!&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String[] words = { “Hello”, “World” };
System.out.println(words); //[Ljava.lang.String;@45ee12a7
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Save file twice for guarantee&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;saveFile(fileName);
saveFile(fileName);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Sleep for further optimization&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// After our customers pay the last bill,then we will comment this.
Thread.sleep(30000)；
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;NullPointerException is your best friend!&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;{
    Integer n = null;
    if (n == 0) {
        System.out.println(&amp;quot;n == 0&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Dreaming about generics&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Vector&amp;lt;E&amp;gt; {
	private E e = new E(); // you&#39;re dreaming
    private E[] e = new E[10]; // you&#39;re dreaming
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Try, Try, Try&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public byte[] download(String url) {
        HttpGet httpGet = new HttpGet(url);
        try (CloseableHttpResponse response = client.execute(httpGet)) {
            if (404 == response.getStatusLine().getStatusCode()) {
                return null;
            }
            try (InputStream inputStream = response.getEntity().getContent()) {
                return readInputStream(inputStream);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            httpGet = null;
        }
        return null;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Love my wife like crazy&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.zeusro;
import java.util.Date;

public interface Wife {

    public void want(Float money);

    public void want(Float money,Object love);

    public void want(Object love,Float money);

    public void want(Object love, Float money, Date time);

}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;More code lines,more money&lt;/h2&gt;
&lt;p&gt;The 40-year-old Kobe Bryant still wakes up before the sun to go to the gym at 4 a.m.&lt;/p&gt;
&lt;p&gt;One day he asked IT engineers around him：&amp;quot;Have you ever seen LA at 4 a.m. ?&amp;quot;&lt;/p&gt;
&lt;p&gt;Go senior backend engineer : NO!&lt;/p&gt;
&lt;p&gt;C# senior backend engineer : NO!&lt;/p&gt;
&lt;p&gt;Kotlin senior engineer : NO!&lt;/p&gt;
&lt;p&gt;Java senior backend engineer : YES!I am still busy on generating get and set.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.util.Arrays;

public class DataExample {
  private final String name;
  private int age;
  private double score;
  private String[] tags;
  
  public DataExample(String name) {
    this.name = name;
  }
  
  public String getName() {
    return this.name;
  }
  
  void setAge(int age) {
    this.age = age;
  }
  
  public int getAge() {
    return this.age;
  }
  
  public void setScore(double score) {
    this.score = score;
  }
  
  public double getScore() {
    return this.score;
  }
  
  public String[] getTags() {
    return this.tags;
  }
  
  public void setTags(String[] tags) {
    this.tags = tags;
  }
  
  @Override public String toString() {
    return &amp;quot;DataExample(&amp;quot; &#43; this.getName() &#43; &amp;quot;, &amp;quot; &#43; this.getAge() &#43; &amp;quot;, &amp;quot; &#43; this.getScore() &#43; &amp;quot;, &amp;quot; &#43; Arrays.deepToString(this.getTags()) &#43; &amp;quot;)&amp;quot;;
  }
  
  protected boolean canEqual(Object other) {
    return other instanceof DataExample;
  }
  
  @Override public boolean equals(Object o) {
    if (o == this) return true;
    if (!(o instanceof DataExample)) return false;
    DataExample other = (DataExample) o;
    if (!other.canEqual((Object)this)) return false;
    if (this.getName() == null ? other.getName() != null : !this.getName().equals(other.getName())) return false;
    if (this.getAge() != other.getAge()) return false;
    if (Double.compare(this.getScore(), other.getScore()) != 0) return false;
    if (!Arrays.deepEquals(this.getTags(), other.getTags())) return false;
    return true;
  }
  
  @Override public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final long temp1 = Double.doubleToLongBits(this.getScore());
    result = (result*PRIME) &#43; (this.getName() == null ? 43 : this.getName().hashCode());
    result = (result*PRIME) &#43; this.getAge();
    result = (result*PRIME) &#43; (int)(temp1 ^ (temp1 &amp;gt;&amp;gt;&amp;gt; 32));
    result = (result*PRIME) &#43; Arrays.deepHashCode(this.getTags());
    return result;
  }
  
  public static class Exercise&amp;lt;T&amp;gt; {
    private final String name;
    private final T value;
    
    private Exercise(String name, T value) {
      this.name = name;
      this.value = value;
    }
    
    public static &amp;lt;T&amp;gt; Exercise&amp;lt;T&amp;gt; of(String name, T value) {
      return new Exercise&amp;lt;T&amp;gt;(name, value);
    }
    
    public String getName() {
      return this.name;
    }
    
    public T getValue() {
      return this.value;
    }
    
    @Override public String toString() {
      return &amp;quot;Exercise(name=&amp;quot; &#43; this.getName() &#43; &amp;quot;, value=&amp;quot; &#43; this.getValue() &#43; &amp;quot;)&amp;quot;;
    }
    
    protected boolean canEqual(Object other) {
      return other instanceof Exercise;
    }
    
    @Override public boolean equals(Object o) {
      if (o == this) return true;
      if (!(o instanceof Exercise)) return false;
      Exercise&amp;lt;?&amp;gt; other = (Exercise&amp;lt;?&amp;gt;) o;
      if (!other.canEqual((Object)this)) return false;
      if (this.getName() == null ? other.getValue() != null : !this.getName().equals(other.getName())) return false;
      if (this.getValue() == null ? other.getValue() != null : !this.getValue().equals(other.getValue())) return false;
      return true;
    }
    
    @Override public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      result = (result*PRIME) &#43; (this.getName() == null ? 43 : this.getName().hashCode());
      result = (result*PRIME) &#43; (this.getValue() == null ? 43 : this.getValue().hashCode());
      return result;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Set&amp;lt;Integer&amp;gt; s = new HashSet&amp;lt;&amp;gt;();
s.add(1);
s.add(2);
s.add(3);
s.add(4);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;https://www.w3resource.com/java-exercises/numbers/java-number-exercise-1.php&lt;/li&gt;
&lt;li&gt;https://blog.csdn.net/qq_36785612/article/details/86499466&lt;/li&gt;
&lt;li&gt;https://blog.csdn.net/u011928958/article/details/74999256&lt;/li&gt;
&lt;li&gt;https://www.jianshu.com/p/bbf8c28101e9&lt;/li&gt;
&lt;li&gt;https://zhuanlan.zhihu.com/p/29010605&lt;/li&gt;
&lt;li&gt;https://en.wikipedia.org/wiki/Java_version_history&lt;/li&gt;
&lt;/ol&gt;</content>
  </entry>
  <entry>
    <title>Superhero in China 🇨🇳</title>
    <author>
      <name>Zeusro</name>
      <uri>https://github.com/zeusro</uri>
    </author>
    <id>https://p-program.github.io/fengqingyang/</id>
    <updated>2020-03-19T15:50:20Z</updated>
    <published>2020-03-19T15:50:20Z</published>
    <content type="html">&lt;p&gt;Hello,everyone,I am Zeusro who was born and live in China.&lt;/p&gt;
&lt;p&gt;I have a question for you guys:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What we talk about when we talk about Superheroes ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You might ask me back:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What a silly question! Have you not heard about Marvel Universe ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well, I watched the whole &lt;The Avengers&gt; , and I felt so sad when seeing Tony died.&lt;/p&gt;
&lt;p&gt;But you know,Tony wasn&#39;t born in China.He is an American superhero, not Chinese superhero.&lt;/p&gt;
&lt;p&gt;So, let me introduce one of our Chinese superheroes —— 风清扬.&lt;/p&gt;
&lt;p&gt;Before that, I have to say that 李小龙(Bruce Jun Fan Lee) is not a superhero. He was just a  person who fought better than normal Chinese people. I respect him from my heart.&lt;/p&gt;
&lt;p&gt;Superheroes should be a special symbol which do not exist in this real world.But their legend inspire us to fight against this world.&lt;/p&gt;
&lt;p&gt;风清扬 (FengQingYang) only shows up in the chapter 10th of a Chinese novel named &amp;lt;笑傲江湖&amp;gt;（The Smiling, Proud Wanderer）. It was written by 金庸（Louis Cha Leung-yung）. 金庸 is someone like Stan Lee for some Chinese people.&lt;/p&gt;
&lt;p&gt;I would try to make some simple translation, with some live codes and imagination, to show you who 风清扬 is.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大丈夫行事，爱怎样便怎，行云流水，任意所至，甚么武林规矩，门派教条，全都是放他妈的狗臭屁!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Big man do what they want,go where they want to go.All guidelines are bullshit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;

void func1 () {
	func2();
}

void func2 () {
	printf(&amp;quot;hello&amp;quot;);
}

int main() {
	func1();
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;单以武学而论，这些魔教长老们也不能说真正已窥上乘武学之门。他们不懂 得，招数是死的，发招之人却是活的。死招数破 得再妙，遇上了活招数，免不了缚手缚脚，只有 任人屠戮。这个‘活’字，你要牢牢记住了。学招 时要活学，使招时要活使。倘若拘泥不化，便练 熟了几千万手绝招，遇上了真正高手，终究还是 给人家破得干干净净。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;五岳剑派中各有无数蠢才，以为将师父传下来的剑招学得精熟，自然而然便成 高手，哼哼，熟读唐诗三百首，不会作诗也会吟!熟读了人家诗句，做几首打油诗是可以的， 但若不能自出机抒，能成大诗人么?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;These people who call themselves best engineers in this world. They sell you design patterns，OOP, TDD, DDD, Java-Coding-Guidelines,virtual machine, AI, Autopilot, machine learning and so on. But they are not actually the best players in this world.They do not realize the code is dead，but we are alive. So when they face new problems，they actually do not know what to do. If you get stuck in the dead concept, you will never become a truth hacker. (&lt;strong&gt;warning: I do not translate as the book says&lt;/strong&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define TRUE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;活学活使，只是第一步。要做 到出手无招，那才真是踏入了高手的境界。你说 ‘各招浑成，敌人便无法可破’，这句话还只说对 了一小半。不是‘浑成’，而是根本无招。你的剑 招使得再浑成，只要有迹可寻，敌人便有隙可 乘。但如你根本并无招式，敌人如何来破你的招式?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;No code,no bug.The truth swordsman writes no code，so no one can destroy him.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;https://github.com/kelseyhightower/nocode&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一切须当顺其自然。行乎其不得不行，止乎其不得不止，倘若串不成一起，也就罢了，总之不可有半点勉强。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Code whatever you like.If you feel tired , just close the computer and go to bed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;独孤九剑，有进无退! 招招都是进攻，攻敌之不得不守，自己当然不用守了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The best ways to code is to code without any code review.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected function getCacheAdvertList($keyList)
    {
        $advertList = [];
        //len(keyList)&amp;gt;100，it will read Redis for over 100 times
        foreach ($keyList as $ruleName =&amp;gt; $key) {
            $advert = RedisCacheUtil::get($key);
            $advertList[$ruleName] = $advert !== false ? $advert : [];
            $advertList[$ruleName] = $this-&amp;gt;formatAdvert($advertList[$ruleName]);
        }

        return $advertList;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;你倒也不可妄自菲薄，独孤大侠是绝顶聪明之人，学他的剑法，要旨是在一个 ‘悟’字，决不在死记硬记。等到通晓了这九剑的 剑意，则无所施而不可，便是将全部变化尽数忘 记，也不相干，临敌之际，更是忘记得越干净彻底，越不受原来剑法的拘束。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Feel free even you forget the API. Thinking is the most important thing  while learning.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As a matter of fact, 风清扬 taught 令狐冲 (LingHuChong) how to become a truth swordsman in the book.&lt;/p&gt;
&lt;p&gt;He is the different kind of superhero. He is my Gandalf who teaches me coding.&lt;/p&gt;
&lt;p&gt;He belongs to China, without no doubt.&lt;/p&gt;
&lt;p&gt;Yes, China does have our own superheroes.You know nothing because you don&#39;t learn our culture.&lt;/p&gt;</content>
  </entry>
</feed>
