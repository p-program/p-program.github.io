<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh">
  <title>Bullshit Program</title>
  <subtitle>Bullshit Program Website</subtitle>
  <id>https://bullshitprogram.com/</id>
  <author>
    <name>Bullshit Program</name>
    <uri>https://bullshitprogram.com/</uri>
  </author>
  <updated>2025-06-16T08:40:33Z</updated>
  <link rel="self" type="application/atom+xml" href="https://bullshitprogram.com/feed.atom" hreflang="zh"/>
  <link rel="alternate" type="text/html" href="https://bullshitprogram.com/" hreflang="zh"/>
  <entry>
    <title>我已证明P=NP</title>
    <author>
      <name>Zeusro</name>
      <uri>https://github.com/zeusro</uri>
    </author>
    <id>https://bullshitprogram.com/p-np/</id>
    <updated>2025-06-16T05:00:00Z</updated>
    <published>2025-06-16T05:00:00Z</published>
    <content type="html">&lt;p&gt;&lt;a href=&#34;https://medium.com/@zeusro/p-np-45d6766dd2e6&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;One is all,all in one.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;第一性原理&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/zeusro/math&#34;&gt;N维数学假说&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;数学证明&lt;/h2&gt;
&lt;p&gt;XYZ 空间是n维空间里面的特殊情况(t=0)。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1:t=0
2:x=x &amp;amp;&amp;amp; y=y &amp;amp;&amp;amp; z=z &amp;amp;&amp;amp; 1=1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但我们实际上是生活在n维空间里面。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// t≠0 表示时间瞬息万变的
1:t≠0
2:1=n ⇔ n=1
3:P=P ⇔ P=NP
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由推论2（推论2的证明见&lt;a href=&#34;https://github.com/zeusro/math/blob/main/n/n.zh.md&#34;&gt;这里&lt;/a&gt;）可以
将 P=NP 简化为 P=P 的问题，因此，P=NP问题便可以在n维空间中解决。&lt;/p&gt;
&lt;p&gt;举个通俗的例子:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1=n : 我是人。&lt;/li&gt;
&lt;li&gt;n=1 : n维空间是一个整体&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;旅行商问题（TSP, Traveling Salesman Problem）&lt;/h2&gt;
&lt;p&gt;问题: 给定一组城市和任意两城市之间的距离，要求找出一条最短的路线K，使得：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个城市恰好访问一次&lt;/li&gt;
&lt;li&gt;最后返回起点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我的解答：这个问题是一个N维空间上N点连线，求最短的问题。&lt;/p&gt;
&lt;p&gt;在传统的3维空间里面，由于时间被“忽视”（t=0）了，所以看起来不可解。&lt;/p&gt;
&lt;p&gt;但&lt;strong&gt;在n维空间里面，度量线段的长度单位是“时间的长短”&lt;/strong&gt;。举个例子，从汕头高铁站到广州东，对于人来说，最快的方案是搭高铁；但如果你是闪电侠，你可以绕地球一圈之后再回来，再从汕头高铁站跑到广州东。&lt;/p&gt;
&lt;p&gt;只要你花的时间比高铁少，虽然你的路程多了一个圈，你的解就是更优解。
因此，解题的思路在于对”距离K“进行概念转换，以时间长短作为第一标准。如果用这种角度去思考三维线段，就会发现，其实同样的速度下，就是”直“的线段最快。N维线段的时间度量同样适用。&lt;/p&gt;
&lt;p&gt;从哪个城市出发并不重要。
只要你到达当前城市后总是前往下一个最近的城市，这个问题就可以转化为贪婪搜索最短路径来解决。&lt;/p&gt;
&lt;p&gt;在三维欧氏空间中，两点之间的最短路径是直线。&lt;/p&gt;
&lt;p&gt;在 n 维空间中，线段不一定遵循三维直线。&lt;/p&gt;
&lt;p&gt;那么，有人会问了，如果算法的规模特别大（地图上有非常多个点）,问题是否就不可解。我的回答是可解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/P=NP/USA.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们以美国地图为例。实际上解题的关键在于“计算整体解法的算法规模”以及“大规模算法分治”。
说得简单点，就是我们在美国地图上面随机选择一个点，这个点必定包含经纬度信息，有个经纬度信息就可以推断出这个点所在的“洲”。那么最近的点必然是这个“洲”里面的点。&lt;/p&gt;
&lt;p&gt;如果你还要抬杠，那么干脆就按照我的暴力穷举算法，如果算法复杂度是50个城市（各分布在50个洲）。每次到达一个新城市之后，直接暴力穷举找到距离这个新城市通勤最近的点即可。&lt;/p&gt;
&lt;p&gt;通勤最近的点指的是最方便去的地方，比如现在从海珠桥去中山大学海珠校区虽然最近，但因为我没有学生证，所以从海珠桥去广州塔才是最近的。&lt;/p&gt;
&lt;p&gt;O(n)的问题，最终降维成O(1)解决。&lt;/p&gt;
&lt;p&gt;可以看到，无论多难的问题，其实都有一个前提和”线索“。只要找到线索，就能解题。&lt;/p&gt;
&lt;p&gt;I think I have proved P=NP problem from math.
Other 20%,time will tell.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;宇宙内事乃己分内事，己分内事乃宇宙内事
&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>
  <entry>
    <title>OAM(Open AI Model)</title>
    <author>
      <name>Zeusro</name>
      <uri>https://github.com/zeusro</uri>
    </author>
    <id>https://bullshitprogram.com/oam/</id>
    <updated>2025-04-28T14:00:00Z</updated>
    <published>2025-04-28T14:00:00Z</published>
    <content type="html">&lt;p&gt;&lt;code&gt;双兔傍地走，安能辨我是雄雌&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Spec&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-GO&#34;&gt;type AI interface {
	SloveProblem(question string) (output interface{}, cost time.Duration)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The AI ​​that takes the shortest time is better.&lt;/p&gt;
&lt;p&gt;Some may ask, why use time to measure the quality of answers?&lt;/p&gt;
&lt;p&gt;Because &lt;strong&gt;time will tell the truth.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;See &lt;a href=&#34;https://github.com/p-program/OAM/blob/main/function/local/gorm/analyze/module.go&#34;&gt;this&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Differences between OAM（Open Application Model） and OAM（Open AI Model）&lt;/h2&gt;
&lt;p&gt;OAM（Open Application Model） is an open model for defining cloud native apps.&lt;/p&gt;
&lt;p&gt;OAM（Open AI Model） is an open model for defining AI.&lt;/p&gt;
&lt;p&gt;Focused on AI rather than application, Open AI Model [OAM] brings simplest but most powerful  design for modeling AI.&lt;/p&gt;
&lt;h2&gt;Why does OAM fail?&lt;/h2&gt;
&lt;p&gt;They know nothing about DevOps.&lt;/p&gt;
&lt;p&gt;The basic model is not right,the following content is completely wrong.&lt;/p&gt;
&lt;p&gt;Actual DevOps job is like that:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/OAM/suo.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Link&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/oam-dev/spec/pull/381&#34;&gt;天地不仁以万物为刍狗&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>AI Driven Design Shit Database</title>
    <author>
      <name>Zeusro</name>
      <uri>https://github.com/zeusro</uri>
    </author>
    <id>https://bullshitprogram.com/ai-driven-design-shit-database/</id>
    <updated>2025-04-19T00:00:00Z</updated>
    <published>2025-04-19T00:00:00Z</published>
    <content type="html">&lt;p&gt;关注个人拉屎健康：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/AI-Driven-Design-Shit-Database/mac.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2&gt;原始需求文档&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;
git config user.name &amp;quot;oracle&amp;quot;
git config user.email &amp;quot;trademar_us@oracle.com&amp;quot;

以0到5天的间隔，生成数据，每一天的数据最多3条。

分析腹泻的时间（一天》=3次 或者2次的间隔少于60分钟）
拉屎困难的次数（3天拉一次）

拉屎时间，
拉屎顺畅程度
0 完全拉不出
1几乎拉不出来
2正常拉屎
3一泻千里

接口：散点图
每年拉屎报告
每周拉屎报告（4～7次算正常）
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d --name clickhouse-server \
  -p 8123:8123 \
  -p 9000:9000 \
  -v /Users/zeusro/data:/var/lib/clickhouse \
  -e CLICKHOUSE_PASSWORD=123456 \
  clickhouse/clickhouse-server:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;准备底层数据&lt;/h2&gt;
&lt;h3&gt;准备提示词，蒸馏回答&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;mac 系统中创建备忘录，记录项目的背景信息&lt;/li&gt;
&lt;li&gt;下载最新版 chatGPT 客户端，将备忘录作为背景信息，让AI创建数据库和表&lt;/li&gt;
&lt;li&gt;改进提示词，微调数据表&lt;/li&gt;
&lt;li&gt;将定制化需求作为新的提示词，让 chatGPT 导出相应sql&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-prompt&#34;&gt;创建一个名为shit的数据库，用合适的字段描述场景
简化上述表格，去掉poop_times_today ，interval_minutes，notes，时间全部用 DateTime，用枚举表示 smoothness
周报和月报需要拓展一个需求， 将排便的频率和间隔做一个静态分析：如果一天拉大于等于3次，判定为腹泻；如果每周排便少于等于三次，判定为便秘，将这些定性作为周报，月报的结论体现出来

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最终我们从ai的回答中提取关键信息&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE DATABASE IF NOT EXISTS shit
CREATE TABLE IF NOT EXISTS shit.toilet_log
(
    id           UInt64,               -- 唯一ID
    log_time     DateTime,             -- 拉屎时间，精确到秒
    smoothness   Enum8(                -- 拉屎顺畅程度
                    &#39;blocked&#39; = 0,     -- 完全拉不出
                    &#39;hardly&#39;  = 1,     -- 几乎拉不出
                    &#39;normal&#39;  = 2,     -- 正常拉屎
                    &#39;diarrhea&#39;= 3      -- 一泻千里
                  )
)
ENGINE = MergeTree
ORDER BY log_time;

INSERT INTO shit.toilet_log VALUES
(1, &#39;2025-04-17 08:30:00&#39;, &#39;normal&#39;),
(2, &#39;2025-04-17 10:10:00&#39;, &#39;diarrhea&#39;),
(3, &#39;2025-04-18 09:00:00&#39;, &#39;blocked&#39;);

-- 查询一泻千里的次数：
SELECT count() 
FROM shit.toilet_log 
WHERE smoothness = &#39;diarrhea&#39;;

-- 查询每天拉屎次数：
SELECT toDate(log_time) AS date, count() 
FROM shit.toilet_log 
GROUP BY date 
ORDER BY date;

-- 📊 腹泻日标记（先建个中间表/子查询）
SELECT 
    toDate(log_time) AS day,
    count() AS poop_count,
    (count() &amp;gt;= 3) AS is_diarrhea_day
FROM shit.toilet_log
GROUP BY day
ORDER BY day;

-- 📊 周报：腹泻、便秘、健康
WITH 
-- 腹泻日统计
(SELECT 
    toDate(log_time) AS day, 
    count() AS poop_count
 FROM shit.toilet_log
 GROUP BY day) AS daily_stats

SELECT 
    toStartOfWeek(day) AS week_start,
    count() AS total_days,
    sum(poop_count) AS total_poop_count,
    sum(poop_count &amp;gt;= 3) AS diarrhea_days,
    (total_poop_count &amp;lt;= 3) AS is_constipation_week,
    (diarrhea_days = 0 AND total_poop_count &amp;gt; 3) AS is_healthy_week
FROM daily_stats
GROUP BY week_start
ORDER BY week_start;

/*
is_constipation_week = 1 → 便秘周
is_healthy_week = 1 → 健康周
*/

-- 📊 月报：腹泻、便秘、健康
WITH 
-- 腹泻日统计
(SELECT 
    toDate(log_time) AS day, 
    count() AS poop_count
 FROM shit.toilet_log
 GROUP BY day) AS daily_stats

SELECT 
    toStartOfMonth(day) AS month_start,
    count() AS total_days,
    sum(poop_count) AS total_poop_count,
    sum(poop_count &amp;gt;= 3) AS diarrhea_days,
    (total_poop_count &amp;lt;= 12) AS is_constipation_month,
    (diarrhea_days = 0 AND total_poop_count &amp;gt; 12) AS is_healthy_month
FROM daily_stats
GROUP BY month_start
ORDER BY month_start;

/*
is_constipation_month = 1 → 便秘月
is_healthy_month = 1 → 健康月
*/

&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;导入数据&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-prompt&#34;&gt;根据这个表结构生成最起码400条测试数据，要求时间log_time，smoothness 随机分布。每一天产生的数据最少0条，最多3条.以csv形式导出。
日期到上下界调整一下，调整为 2024-01-01 ～ 2025-04-17
如何在mac系统中使用clickhouse client从本地文件csv中导入数据
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;brew install clickhouse
-- 隐私-安全性安全性 允许 clickhouse 命令执行
clickhouse client --host=localhost --port=9000 --user=default --password=123456 --query=&amp;quot;INSERT INTO shit.toilet_log FORMAT CSV&amp;quot; &amp;lt; /Users/yourname/toilet_log_data.csv

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;之后我们打开 &lt;a href=&#34;http://dash.tabix.io/dashboard&#34;&gt;tabix&lt;/a&gt; 验证结果即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT 
    count() AS all
 FROM shit.toilet_log
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;设计应用层&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-prompt&#34;&gt;设计一个页面，中间是一个黄色的圆形，图片右边包含一个滚动条，滚动条往下滚动黄色会逐渐加深，一共有4种黄色。需要用原生html，不使用任何外部插件。
需要支持window，mac，ios，Android客户端。并且点击图片会触发post调用，参数是{&amp;quot;smoothness&amp;quot;:1},smoothness是颜色深度，一共有1，2，3，4。4表示原色最深。

使用gin作为web框架，配置简单够用的功能（比如日志记录，traceid），并在里面加一个index.html页面,另外在后端中加一个路由“/shit”,指向Shit方法委托
shit方法实现对click house 数据库表shit.toilet_log 的写入
写一个docker-compose.yml,把这个gin的web项目，联通 click house 一起启动
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;微调一下内容结果，启动就行了。完整项目见&lt;a href=&#34;https://github.com/p-program/shit&#34;&gt;shit&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose up --build
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;设计灵感&lt;/h2&gt;
&lt;p&gt;设计的灵感来自于我过往的经历。一位商人曾经说过，如果生活给了你一个柠檬，你应该把它榨成汁，然后喝下去。
那么化用这一种思维模式，如果有人在你的头上拉屎，你应该把他们记录下来，提取里面的关键性信息，找到一个适当的时机，再充分利用。&lt;/p&gt;
&lt;h2&gt;todo&lt;/h2&gt;
&lt;p&gt;可视化暂时用  &lt;a href=&#34;http://dash.tabix.io/dashboard&#34;&gt;tabix&lt;/a&gt; 分析了，也可以写几个接口，把上面的sql 拿来用，导出一个周报/月报，但我懒得搞了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;集成周报，月报图表，提供相应的数据和接口&lt;/li&gt;
&lt;/ol&gt;</content>
  </entry>
  <entry>
    <title>One Open Operating System</title>
    <author>
      <name>Zeusro</name>
      <uri>https://github.com/zeusro</uri>
    </author>
    <id>https://bullshitprogram.com/one-open-operating-system/</id>
    <updated>2020-10-20T11:24:49Z</updated>
    <published>2020-10-20T11:24:49Z</published>
    <content type="html">&lt;p&gt;Current operating system (IOS,Android,Windows,Mac) is not exactly what I want,so I decide to rebuild another operating system.&lt;/p&gt;
&lt;p&gt;I call it &lt;strong&gt;One Open Operating System&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I split this final goal into some executable steps.&lt;/p&gt;
&lt;h2&gt;App&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/One-Open-Operating-System/1-Call-Taxi.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Current App is Offline front-end &#43; web service.&lt;/p&gt;
&lt;p&gt;But I think an ideal App is a &lt;strong&gt;cloud function&lt;/strong&gt;. We don&#39;t need to download it,it always runs on the cloud as some kind of serverless service.&lt;/p&gt;
&lt;p&gt;Wechat micro App is an example but I think it is not simple enough.&lt;/p&gt;
&lt;p&gt;For example,calling Taxi is a cloud function like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func CallTaxi(myPosition,destination FourDimensionalVector){
    return Taxi{}
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calling Taxi is exactly a &lt;strong&gt;edge computing&lt;/strong&gt; behavior--After telling the cloud my position and my destination,the Taxi scheduler will let the nearest Taxi to me do the  other &amp;quot;computing&amp;quot;（Take me home）.&lt;/p&gt;
&lt;h2&gt;Electronic Device&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/One-Open-Operating-System/2-google-glass.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;After putting &lt;strong&gt;edge computing&lt;/strong&gt; onto the cloud,we can work on the next generation of the electronic device(currently we call them cellphone/IPAD/computer/laptop).&lt;/p&gt;
&lt;p&gt;In my option,the electronic device is just a &amp;quot;&lt;strong&gt;display layer&lt;/strong&gt;&amp;quot; and a collection of sensors.We use our mind or voice to control the electronic device.The CPU,RAM is useless.And I would call ROM as the &amp;quot;backup&amp;quot; of the cloud data.&lt;/p&gt;
&lt;p&gt;I would like to say,the key of the electronic device is AI.And I think &lt;a href=&#34;http://www.bullshitprogram.com/the-seed-of-robot/&#34;&gt;AI is an open intelligent API gateway&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/One-Open-Operating-System/3-Roman.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Finally,the electronic device will became a superb AI like Roman EXE.He will help us do some &amp;quot;&lt;strong&gt;daily computing jobs&lt;/strong&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;The &amp;quot;云影&amp;quot; system is an example. By 5G,everything is possible.&lt;/p&gt;
&lt;h2&gt;Kubernetes&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/One-Open-Operating-System/4-kubernetes.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;I think Kubernetes is just a &lt;strong&gt;middle distributed system&lt;/strong&gt;.There are so many ugly design and unsolved problems in Kubernetes.Such like volume(it is actually a distributed storage problem),network diagnosis,StatefulSet,CronJob and so on.&lt;/p&gt;
&lt;p&gt;Just like &lt;a href=&#34;https://github.com/resouer&#34;&gt;Lei Zhang&lt;/a&gt; said,Kubernetes is just a database.The most important things is paradigm,I call it &lt;strong&gt;cloud native application paradigm&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It includes&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Observability&lt;/li&gt;
&lt;li&gt;Self-healing&lt;/li&gt;
&lt;li&gt;Fallibility&lt;/li&gt;
&lt;li&gt;Debuggable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Kubernetes&#39;s effect is to &lt;strong&gt;build up a cloud native application standard&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;IaaS&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/One-Open-Operating-System/5-IAAS.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;First of all,we need to declare : &lt;strong&gt;IaaS is a super distributed system&lt;/strong&gt; which includes so many products.&lt;/p&gt;
&lt;p&gt;I think in the near future,IaaS will become a super &lt;strong&gt;Cloud Native Application Store&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In developer&#39;s view,we may need database,redis,distributed message queue and so on.&lt;/p&gt;
&lt;p&gt;So take Tencent Cloud as an example.A better DevOps pipeline would be like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Tencent Cloud administrator creates a sub user(Currently we call it user access key);&lt;/li&gt;
&lt;li&gt;The project manager sets up the &lt;a href=&#34;https://intl.cloud.tencent.com/document/product/598/17848&#34;&gt;CAM&lt;/a&gt; according to actual condition;&lt;/li&gt;
&lt;li&gt;The R&amp;amp;D (Research and Development) engineer writes business code;&lt;/li&gt;
&lt;li&gt;The DevOps engineer helps the R&amp;amp;D engineer to make the code running on the Tencent Cloud(Such as preparing the test/product environment,docker build,configuration,logging,monitor).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/One-Open-Operating-System/6-sidecar-container-call-product.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Look at the picture above,then you will find that the business code would be simply like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;client := ServiceMeshClient{}
iaas := client.UseTencentCloud()
redis := iaas.Redis()
setRedisResult := redis.Put(&amp;quot;Zeusro&amp;quot;,&amp;quot;是一个靓仔&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Just forget the configuration&lt;/strong&gt;,let the DevOps engineer do that job.That is not the R&amp;amp;D (Research and Development) engineer&#39;s business any more.&lt;/p&gt;
&lt;p&gt;The configuration(region,access key and access secret) is &amp;quot;gone&amp;quot;.It is generated by the configuration controller,and hidden inside the sidecar container.&lt;/p&gt;
&lt;p&gt;In R&amp;amp;D engineer&#39;s view,&lt;strong&gt;zero configuration&lt;/strong&gt; is so cool,don&#39;t you think so?&lt;/p&gt;
&lt;h2&gt;Next Generation Digital Life&lt;/h2&gt;
&lt;p&gt;Let&#39;s come back to the first question: Calling Taxi.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/One-Open-Operating-System/7-Next-Generation-Digital-Life.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the next generation digital world,the process of taking Taxi would be like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Zeusro: Hi,Roman,take me home.&lt;/li&gt;
&lt;li&gt;Roman: OK,wait for a second(get your position and home&#39;s position).&lt;/li&gt;
&lt;li&gt;Roman: Here are some available service like Amap Taxi,DiDi Taxi,Meituan Taxi on the service discovery system（dubbo 3.0, social advertising system).Please make your choice.&lt;/li&gt;
&lt;li&gt;Zeusro: Amap Taxi.&lt;/li&gt;
&lt;li&gt;Roman: OK.&lt;/li&gt;
&lt;li&gt;Taxi driver: Don&#39;t BB.Just get in the car.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/One-Open-Operating-System/8-cat.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Link&lt;/h2&gt;
&lt;p&gt;[1]
阿里云正式发布第一台云电脑“无影”
https://www.yicai.com/news/100775343.html&lt;/p&gt;
&lt;p&gt;[2]
Dubbo 3.0 – 开启下一代云原生微服务
https://www.kubernetes.org.cn/8291.html&lt;/p&gt;
&lt;p&gt;[3]
The Seed Of Robot —— Intelligent API Gateway
http://www.bullshitprogram.com/the-seed-of-robot/&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>广州地铁</title>
    <author>
      <name>Zeusro</name>
      <uri>https://github.com/zeusro</uri>
    </author>
    <id>https://bullshitprogram.com/guangzhou-metro/</id>
    <updated>2020-09-02T02:04:04Z</updated>
    <published>2020-09-02T02:04:04Z</published>
    <content type="html">&lt;p&gt;web 本质是一种流量，一种数据的流转。当前的 web 只是 &lt;code&gt;Serverless&lt;/code&gt; 的一种特例（存活期很长的 &lt;code&gt;Serverless&lt;/code&gt; ）。如果从这个角度上看，其实广州地铁是一个很优美的 &lt;code&gt;Serverless&lt;/code&gt; 系统。&lt;/p&gt;
&lt;p&gt;高效率的web，本质是一种希望数据的流转尽可能快（TPS越高越好），这跟广州的地铁的设计理念是不谋而合的。我之前在知乎上说过，&lt;a href=&#34;https://zhuanlan.zhihu.com/p/145018193&#34;&gt;广州地铁本质上是一个排水系统&lt;/a&gt; ,他设计的目的不是把你运送到目的地，而是希望你尽快离站。所以现在就算你进站后再出站，也要收费（以前有一段时间我记得不用)。&lt;/p&gt;
&lt;p&gt;回到本题。 &lt;code&gt;Serverless&lt;/code&gt; 是一种存活期相对较短的设计。比如广州地铁的存活期一般是日间，到了夜间设备要进行维护。我们把整个问题简单化，只取一号线来讲。假设平时只运行 3~50 辆车。那么低峰期应该只运行3辆车（降低成本），高峰期应该在确保安全的前提下，把运营效率尽可能提高（增加班次）。而到了晚上，众鸟归巢。运行实例为0。&lt;/p&gt;
&lt;h2&gt;Serverless 的优势&lt;/h2&gt;
&lt;p&gt;减少成本：每一个站台只需要少量的广州地铁人员，就能撑起一个站点。地铁工作人员无需关注底层系统（地铁）的运维。他们只需要在调度室吹空调，按按这个按按那个按钮就行。&lt;/p&gt;
&lt;p&gt;快速创新：以前广州地铁需要人工买票什么的，现在支持银联卡，NFC，微信，支付宝计费。&lt;/p&gt;
&lt;p&gt;按需使用、灵活弹性：业务可以根据配置的条件灵活调配资源，它会在夜间睡觉（运行实例为0），在低峰期低开（运行实例为3），在高峰期高开（运行实例50），在超高峰期限流，从而实现资源的最大化利用与运营成本的压缩。&lt;/p&gt;
&lt;h2&gt;广州地铁其实是一种实时数据流处理&lt;/h2&gt;
&lt;p&gt;从乘客角度，搭地铁本质上是一种数据库事务。
原子性(Atomicity)是妹子要么上车，要么不决定搭地铁；
一致性(Consistency)是指妹子上车下车会按照她的期望值，如果她下错站了，说明了她没有实现一致性；
隔离性(Isolation)是指妹子懒得理你；
持久性(Durability)是指妹子上车这一行为有地铁系统作证（上下车买票的凭证）。&lt;/p&gt;
&lt;p&gt;而从地铁角度，整个广州地铁其实是实现了分布式事务的一套实时数据流处理系统。&lt;/p&gt;
&lt;h2&gt;广州地铁2020&lt;/h2&gt;
&lt;h3&gt;前端常驻，后端动态高效伸缩容&lt;/h3&gt;
&lt;p&gt;我们会发现，那些固定设施都固定在那里的。基础设施是一种“前端”。而地铁列车是一种“后端”。&lt;/p&gt;
&lt;p&gt;因为广州地铁事关人命，所以在伸缩容方面采取的策略是根据过往数据预测未来。而伸缩容目前是用人工方式解决。&lt;/p&gt;
&lt;p&gt;这一点也是一种提醒。我们在设计 web 系统的时候通常分前后端。如果按照 &lt;code&gt;Serverless&lt;/code&gt; 角度来重新思考这个问题。那么应该让前端资源常驻（前端只是一些简单的静态文件，占用服务器资源很少），而让后端动态伸缩。这样就不会影响用户体验。&lt;/p&gt;
&lt;h3&gt;流量切分&lt;/h3&gt;
&lt;p&gt;高峰期广州地铁的运营人员会设置各个栅栏。超高峰期会飞站或者拒绝乘客搭乘。从而实现数据的安全（乘客的安全）。&lt;/p&gt;
&lt;h3&gt;计量能力&lt;/h3&gt;
&lt;p&gt;根据乘客的搭乘距离计费。而站台距离本质上是时间。可以说使用时间越长，费用越高。&lt;/p&gt;
&lt;h3&gt;后端的单一职责&lt;/h3&gt;
&lt;p&gt;基本上广州地铁是偏向于人运，而不是货运。每次我要搬家的时候，搭广州地铁总是相对比较麻烦。因为一开始我也说了，广州地铁的设计理念就是一个排水系统。如果变成货运的话，运营效率会大幅度降低。&lt;/p&gt;
&lt;p&gt;所以，我们在设计 &lt;code&gt;Serverless&lt;/code&gt; 后端微服务的时候，也要记住这一点。尽可能让后端微服务的职责尽可能小，小到甚至不需要微服务发现系统。举个例子，xx网盘通过 &lt;code&gt;Serverless&lt;/code&gt; 服务处理瞬时的视频转码请求。&lt;/p&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;p&gt;广州地铁其实是一个运营很高效的 &lt;code&gt;Serverless&lt;/code&gt; 系统。它总结了过往数十年的人流量数据，在高效运营的同时保证乘客的安全（数据安全）。&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Distributed Husband System</title>
    <author>
      <name>Zeusro</name>
      <uri>https://github.com/zeusro</uri>
    </author>
    <id>https://bullshitprogram.com/distributed-husband-system/</id>
    <updated>2020-08-18T09:00:18Z</updated>
    <published>2020-08-18T09:00:18Z</published>
    <content type="html">&lt;p&gt;&lt;strong&gt;本文纯属胡扯，请勿对号入座。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以前，医学泰斗给我共享过一个案例：有个很好看的已婚妹子执意给她老公戴绿帽，她要生一个不属于她老公的孩子。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/Distributed-Husband-System/ten.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;我后来想了一下，如果用生物博弈论的角度来思考族群演替这个问题，在男多女少的地方，推行分布式老公系统，也许是一种解决方案。这种方案远比战争机器来得划算，而且损耗也比较低，同时也满足了妹子的生理需求。&lt;/p&gt;
&lt;h2&gt;分布式老公系统&lt;/h2&gt;
&lt;p&gt;要落实分布式老公系统，有一个前提。这个前提就是基因监测技术的改进。只有满足这个前提，才能设计一套相对完善的分布式老公系统。&lt;/p&gt;
&lt;p&gt;为此，我参考了太阳系这个行星绕日的模型，设计了几个基本法则。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个妹子可以有多个老公&lt;/li&gt;
&lt;li&gt;不同老公之间要和谐共处&lt;/li&gt;
&lt;li&gt;妹子大姨妈的时候不准乱搞&lt;/li&gt;
&lt;li&gt;妹子生的孩子由妹子和多个老公共同抚养，但主要的抚养责任在生父&lt;/li&gt;
&lt;li&gt;老公遗产的第一顺序继承人是他老婆和亲生的孩子，生父母&lt;/li&gt;
&lt;li&gt;同理，孩子的遗产的第一继承人是配偶，子女，生父母&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;当前的分布式老公系统&lt;/h2&gt;
&lt;p&gt;如果一个富婆有钱没处花，除了找多几个男朋友之外，追星也是一种选择。&lt;/p&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/Distributed-Husband-System/first.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;没有耕坏的田，只有累死的牛。&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>藤原拓海教你怎么上下班</title>
    <author>
      <name>Zeusro</name>
      <uri>https://github.com/zeusro</uri>
    </author>
    <id>https://bullshitprogram.com/initial-d/</id>
    <updated>2020-05-28T05:26:27Z</updated>
    <published>2020-05-28T05:26:27Z</published>
    <content type="html">&lt;h2&gt;我是藤原拓海（Who）&lt;/h2&gt;
&lt;p&gt;大家好，我是藤原拓海。2020年新冠肺炎，无奈之下只能自己做饭。之后我发现饭盒斜放进书包里面的话，会影响饭的口感。再加上我不是富二代，万般无奈下，我只能每天用手拎着饭盒跑秋名山。&lt;/p&gt;
&lt;p&gt;但我逐渐发现了这其中有迹可循。&lt;/p&gt;
&lt;h2&gt;场景分析（What）&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/Initial-D/1.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;分析这个问题，我们需要建立一个模型。对“现实”世界进行充分建模。&lt;/p&gt;
&lt;p&gt;首先，人流量是一个可以预测的潮汐模型。广州地铁在这方面积累了大量的运营经验，在各个关卡都设置了“哨兵”（安保是上面的意思，不关地铁的事）。大型节假日之前会提前预演，比如周五下午五点左右会提前设置栅栏，为人流洪峰进行预备。中心城区8~9点是高峰期，我极少选这个时间段出门。&lt;/p&gt;
&lt;p&gt;对用户而言，他们可以通过APP，微信公众号，微博实时了解各段线路的流量情况，错峰出行。可以说，广州地铁做的很好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;搭地铁是重复的固定赛道跑酷游戏（Game）&lt;/strong&gt;。这个游戏的好玩之处在于，每一个人都有多个“对手（players）”。我需要在不与其他人接触的前提下，比每一个对手都快，这样才算获得了游戏的胜利（P均衡）。&lt;/p&gt;
&lt;h2&gt;深入分析&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/Initial-D/2.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;继续使用5W1H（What,When,Where,Who,Why）分析这个问题。&lt;/p&gt;
&lt;p&gt;When
时间点的选择需要反复思考。&lt;code&gt;Best Timing&lt;/code&gt;是不存在的，只有&lt;code&gt;Better Timing&lt;/code&gt;。总的来说，需要一个&lt;code&gt;Scalable Timetable&lt;/code&gt;。只有时间表足够弹性，才能保证在雨天的时候不迟到，稍早一点出门，实现错峰出行。&lt;/p&gt;
&lt;p&gt;Where
这个问题用Where其实有点勉强。因为这个问题涉及到2个点。不过，我说过，“线缩成点”。也就是说，最理想的情况是根本就不搭地铁，走路实现上下班。&lt;/p&gt;
&lt;p&gt;Why
如果模型出错，导致自己出行不便，要多问自己为什么，是不是走路的步数慢了，还是没有预测到路人们的运动趋势。&lt;/p&gt;
&lt;h2&gt;集体无意识&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/Initial-D/3.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;羊群效应&lt;/li&gt;
&lt;li&gt;靠右行走（左边的人少）&lt;/li&gt;
&lt;li&gt;规避黄线（靠黄线那一侧通常人比较少）&lt;/li&gt;
&lt;li&gt;服从指挥（楼梯通常有两边，但相反方向的楼梯即便没人也很少人用）&lt;/li&gt;
&lt;li&gt;临界时间（8：20/8：50通常是临界上班时间，这个点的人赶路像奔丧一样）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;方案落实（How）&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/Initial-D/4.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;综合以上所有信息，落实方案就相当简单了。地铁的营运班次都是非常有规律的，只要挑一个人流量少的时间错峰出行即可。&lt;/p&gt;
&lt;p&gt;总诀式为&lt;/p&gt;
&lt;p&gt;两点之间，线段最短；
天下武功，唯快不破；
邯郸学步，后发先至。&lt;/p&gt;
&lt;h2&gt;日益优化&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/Initial-D/5.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;提高自己的反应能力，控制自身的动量，就能逐渐学会矢量运算。&lt;/p&gt;
&lt;p&gt;下班是上班的逆运算。上班熟练了之后，自然知道怎么下班。&lt;/p&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/Initial-D/fan-che.gif&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果你有钱并且会跳伞，建议直接开直升飞机；
如果你有钱但不想开车，建议叫滴滴打车；
如果你没钱也不想搭车，建议搭地铁。&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>如何让富婆和妹子同时注意到我帅气地玩滑板</title>
    <author>
      <name>Zeusro</name>
      <uri>https://github.com/zeusro</uri>
    </author>
    <id>https://bullshitprogram.com/rich-grandma-looks-at-me/</id>
    <updated>2020-05-24T02:03:42Z</updated>
    <published>2020-05-24T02:03:42Z</published>
    <content type="html">&lt;p&gt;2020-05-23下午，处在失业边缘的本帅趁着邻居家小孩跑去补习，借了他的滑板，开始练习。
我们的小区有一个圆形的小花坛，周围是人行道。每天早上都有妹子和富婆一起在这赛道上面爬。&lt;/p&gt;
&lt;p&gt;自从我跟端端大魔王科普了一下“分布式老婆系统”之后，大家就分道扬镳了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/Rich-Grandma-Looks-At-Me/1.jpeg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;按照《Distributed Wives System[1]》的理论，要构建现代分布式老婆系统，最起码需要2个老婆。于是，富婆和妹子都成为了我的目标。&lt;/p&gt;
&lt;p&gt;假设我，妹子，富婆都是同时开始，
同向沿着跑道匀速运动，并且都不需要喝水以及做任何停顿，圆形赛道总长度为600m，
我的移动速度为1m/s，妹子的移动速度为2m/s，富婆的移动速度为3m/s。&lt;/p&gt;
&lt;p&gt;那么问题来了，&lt;strong&gt;如何让富婆和妹子同时注意到我帅气地玩滑板&lt;/strong&gt;？&lt;/p&gt;
&lt;h2&gt;高中生解释&lt;/h2&gt;
&lt;p&gt;我的周期是 600/1=600s,也就是说，每600s跑完一圈；
妹子的周期是 300s；
富婆的周期是 200s;&lt;/p&gt;
&lt;p&gt;得出下列公式&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 我的运动距离必定为600的倍数，d1为圈数
[1]d1*600=a*1*t --&amp;gt; d1=at/600
# 妹子的运动距离必定为600的倍数，d2为圈数
[2]d2*600=b*2*t --&amp;gt; d2=bt/300
# 富婆的运动距离必定为600的倍数，d3为圈数
[3]d3*600=c*3*t --&amp;gt; d3=ct/200
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这些等式要同时成立，求t的集合SB。&lt;/p&gt;
&lt;p&gt;这道题的关键在于理解题目。题目其实是求d1,d2,d3的公倍数，求得公倍数dn之后，代入公式，就能得到t的一个解。&lt;/p&gt;
&lt;p&gt;d1,d2,d3的公倍数dn=abct/100 。一圈是600m，dn是正整数，t只能是600的倍数。&lt;/p&gt;
&lt;p&gt;假设时间t是有限的。定义dn为无限集合SB的其中一个解,那么集合SB的第一个元素是0，意思是大家都在同一个起点上。&lt;/p&gt;
&lt;p&gt;集合SB的第二个元素是600。&lt;/p&gt;
&lt;p&gt;对于我来说，&lt;code&gt;d1=1,a1=1&lt;/code&gt;, &lt;code&gt;t1=1*600/1=600s&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;假设大家都处于同一个静态牛顿参考系，这个时候，对于妹子而言，&lt;code&gt;d2=600s * 2 m/s /600m=2&lt;/code&gt;, &lt;code&gt;b1=2*300/600=1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对于富婆来说&lt;code&gt;d3=600s * 3 m/s /600m=3&lt;/code&gt;, &lt;code&gt;c1=1&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;也就是说，600s的时候，我刚好跑完1圈，妹子跑了2圈，富婆刚好跑了3圈。大家又回到了原点。&lt;/p&gt;
&lt;h2&gt;程序解释&lt;/h2&gt;
&lt;p&gt;时间有限，直接暴力穷举，(不)求交集算了，免得浪费我玩滑板的时间。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;sync&amp;quot;
)

const (
	//跑道600m
	distance int64 = 600
	//时间限制3600s
	limit int64 = 3600
)

func main() {
	var wg sync.WaitGroup
	wg.Add(3)
	var list1, list2, list3 []int64
	// 1 hour
	go func(w *sync.WaitGroup) {
		list1 = Zeusro(limit)
		wg.Done()
	}(&amp;amp;wg)
	go func(w *sync.WaitGroup) {
		list2 = YoungAndBeautiful(limit)
		wg.Done()
	}(&amp;amp;wg)
	go func(w *sync.WaitGroup) {
		list3 = RichGrandma(limit)
		wg.Done()
	}(&amp;amp;wg)
	wg.Wait()
	//TODO:没有LINQ 没有泛型，求个毛交集
	fmt.Println(&amp;quot;MVP Equilibrium&amp;quot;)
}

// Zeusro 我的滑板车
func Zeusro(limit int64) (timings []int64) {
	timings = append(timings, 0)
	var v1 int64 = 1
	cycle := distance / v1
	var time int64 = cycle
	//速度*时间=路程
	for time = cycle; time &amp;lt; limit; time &#43;= cycle {
		timings = append(timings, time)
	}
	return timings
}

// YoungAndBeautiful 妹子慢慢走
func YoungAndBeautiful(limit int64) (timings []int64) {
	timings = append(timings, 0)
	var v2 int64 = 2
	cycle := distance / v2
	var time int64 = cycle
	for time = cycle; time &amp;lt; limit; time &#43;= cycle {
		timings = append(timings, time)
	}
	return timings
}

// RichGrandma 富婆在跑步
func RichGrandma(limit int64) (timings []int64) {
	timings = append(timings, 0)
	var v3 int64 = 3
	cycle := distance / v3
	var time int64 = cycle
	for time = cycle; time &amp;lt; limit; time &#43;= cycle {
		timings = append(timings, time)
	}
	return timings
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/Rich-Grandma-Looks-At-Me/2.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;这是一个广义三维世界（我&#43;妹子&#43;富婆）模型,
这个模型存在完美P均衡。
每隔10分钟，我就能与妹子以及富婆完美相遇。&lt;/p&gt;
&lt;h2&gt;吐槽&lt;/h2&gt;
&lt;p&gt;邻居家孩子鬼精鬼精的，竟然让我玩他弟弟的废材滑板。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/Rich-Grandma-Looks-At-Me/IMG_20200524_071419.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2&gt;参考链接&lt;/h2&gt;
&lt;p&gt;[1]
Distributed Wives System
http://www.bullshitprogram.com/distributed-wives-system/&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>漫无止境的八月</title>
    <author>
      <name>p-program</name>
      <uri>https://github.com/p-program</uri>
    </author>
    <id>https://bullshitprogram.com/endless-august/</id>
    <updated>2020-05-19T13:20:00Z</updated>
    <published>2020-05-19T13:20:00Z</published>
    <content type="html">&lt;hr&gt;
&lt;p&gt;《凉宫春日的忧郁》是我很喜欢的一部动画。这部动画的哲学内核是“&lt;strong&gt;我心即神&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/Endless-August/1.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;《漫无止境的八月》是该动画里面的经典场景。简单地说，就是同样类似的剧情重复了8集。当时在看的时候我简直惊呆了，最后也没全看完8集的样子。&lt;/p&gt;
&lt;p&gt;今年，我终于明白这其中有什么深意。《漫无止境的八月》的内核是“西西弗斯推石头”。&lt;/p&gt;
&lt;p&gt;凉宫春日作为唯一神，惩罚她的子民（主要是团员）陷入无尽的轮回。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/Endless-August/2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;无尽的轮回其实就是凡人们的日常生活。每天上班下班，吃饭睡觉，然后过了一天又一天，毫无所得。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;工作效率低下 --&amp;gt; 业绩很差 --&amp;gt; 升职加薪无望 --&amp;gt; 情绪低落 --&amp;gt; 工作效率低下&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这是一个负反馈的无尽循环。&lt;/p&gt;
&lt;p&gt;那么，怎么走出无尽的轮回呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/Endless-August/3.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;答案很简单：&lt;strong&gt;比昨天的自己更好一点就行&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;2004年，在前总裁坎塔卢波因心脏病突发去世后，43岁的查利·贝尔接过大权。&lt;/p&gt;
&lt;p&gt;贝尔家境不好，他是从扫厕所开始干起的，但是他胜在&lt;strong&gt;工作踏实&lt;/strong&gt;——他一步一脚印，走南闯北，逐渐在麦当劳里面站稳脚跟，最终升任总裁。&lt;/p&gt;
&lt;p&gt;所以工作上正向的循环是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给自己定KPI --&amp;gt; 每天努力完成工作目标 --&amp;gt; 自我总结整理归纳反思&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;第二天再重复如上过程。&lt;/p&gt;
&lt;p&gt;每一个阶段，要有一个阶段性的验收里程碑。如果结果是错的，要反思是哪一个环节出了问题，是外部因素，还是内部因素，下一次要怎么解决问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/Endless-August/4.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;重复的工作要努力提高效率，时间永远是单调递增的，所以对于凡人来说是相当有限的。&lt;/p&gt;
&lt;p&gt;如果工作效率已经足够高了，高到基本自动化了。应该想想怎么“放弃”。“放弃”的意思是帮助自己的同事，帮助提高他们的实力。这是一个&lt;strong&gt;社会性的利他正反馈&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在非合作博弈中，只有利他才是最优解&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果在公司内部已经无法再发展下去，应该找更好的机会。这个时候，之前积累的人力资源势能就能转化成“动能”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/Endless-August/5.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;p&gt;当你逐渐像我这般，开车的速度越来越快，最终的结果就是，被妹子们快速地拉黑。&lt;/p&gt;
&lt;h2&gt;参考链接&lt;/h2&gt;
&lt;p&gt;[1]
漫无止境的八月
https://zh.moegirl.org/zh-hans/%E6%BC%AB%E6%97%A0%E6%AD%A2%E5%A2%83%E7%9A%84%E5%85%AB%E6%9C%88&lt;/p&gt;
&lt;p&gt;[2]
OPS线上运维故障或事故级别定义
http://www.5iops.com/html/2012/standard_0515/1.html&lt;/p&gt;
&lt;p&gt;[3]
麦当劳新总裁从扫厕所干起 希望厕所最干净
https://business.sohu.com/2004/04/28/18/article219981873.shtml&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>用「超装逼」排查CDN流量剧增问题</title>
    <author>
      <name>Zeusro</name>
      <uri>https://github.com/zeusro</uri>
    </author>
    <id>https://bullshitprogram.com/super-b/</id>
    <updated>2020-05-19T01:31:00Z</updated>
    <published>2020-05-19T01:31:00Z</published>
    <content type="html">&lt;h2&gt;Background Information&lt;/h2&gt;
&lt;p&gt;我是江户川乱步，目前在侦探社担任调查员。&lt;/p&gt;
&lt;p&gt;我拥有侦探社首屈一指的头脑，是侦探中的侦探。虽然具备超群的观察能力和推理能力，不过个性比较难以捉摸，说话不会看气氛，喜欢更符合客观逻辑的做事。不讨好媚俗，第一次见面一般会称对方为 「&lt;strong&gt;傻逼&lt;/strong&gt;」 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/super-B/1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;作为侦探社核心，我的能力是 「&lt;strong&gt;超装逼&lt;/strong&gt;」。&lt;/p&gt;
&lt;p&gt;老子是真正的天才，所以总是孤独的。正所谓天下地上，唯吾独尊。清华北大应该给我顺丰快递一张本科毕业证书，普林斯顿大学欠我一个博士学位，中科院应该聘请我去当个院士，诺贝尔更欠我一个经济学奖。&lt;/p&gt;
&lt;p&gt;好了，不吹牛逼了。让我们回到原来问题，用
&lt;a href=&#34;https://baike.baidu.com/item/5W1H%E5%88%86%E6%9E%90%E6%B3%95/10091536?fromtitle=5W1H&amp;amp;fromid=6062002&#34;&gt;5W1H&lt;/a&gt;
来重新分析这个问题。&lt;/p&gt;
&lt;h2&gt;When,Where,What,Who&lt;/h2&gt;
&lt;p&gt;最近一个月（2020-04至今），我发现阿里云CDN费用剧增。&lt;/p&gt;
&lt;p&gt;按照二八法则分析，主要矛盾在于图片域名的流量非常高。&lt;/p&gt;
&lt;p&gt;图片域名用的是多线路 &lt;code&gt;cname&lt;/code&gt; 解析，国内按流量计费的阿里云CDN，国外用按带宽计费的网宿CDN。综合考虑之后，我发现混合策略才是最优解，具体见
《
&lt;a href=&#34;http://www.zeusro.com/2019/09/20/cdn-pickup/&#34;&gt;多公有云CDN最佳实践&lt;/a&gt;
》。&lt;/p&gt;
&lt;h2&gt;Why&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/super-B/2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;直接说结论，那也太无聊了。我决定发动我的「&lt;strong&gt;超装逼&lt;/strong&gt;」技能来解决这个问题。&lt;/p&gt;
&lt;p&gt;网站的解析用的是cname，主要面向国内用户&lt;/p&gt;
&lt;p&gt;--&amp;gt; 正常用户的特征是国内的固定IP，且访问次数有限&lt;/p&gt;
&lt;p&gt;--&amp;gt; 一部分异常用户用国外IP&lt;/p&gt;
&lt;p&gt;--&amp;gt; 一部分异常用户的特征是国内变动IP，且每个IP访问流量巨大&lt;/p&gt;
&lt;p&gt;对于国外IP，我用了以带宽计费的网宿。&lt;/p&gt;
&lt;p&gt;对于国内的IP，我一开始觉得是爬虫的问题。刚好阿里云在公测CDN频次控制功能。就顺便加入了他们的群公（吐）测（槽）一把。&lt;/p&gt;
&lt;h3&gt;外部原因&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/super-B/3.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;在不改任何代码的情况下，治疗爬虫的办法就是封IP。于是我从网宿和阿里云那边找了那些比较贱的IP，然后加以封禁。&lt;/p&gt;
&lt;p&gt;但这里面有个蛋疼的地方在于，即便开通了CDN频次控制以及封禁IPV4，这种做法也是治标不治本。&lt;/p&gt;
&lt;p&gt;全国多地ping被攻击域名，得到一个阿里云CDN节点的IP列表，然后循环依次请求。
假设循环50次，那么一个IPV4就能放大成50倍的请求次数。&lt;/p&gt;
&lt;p&gt;阿里云CDN对每个域名，最多只能屏蔽100个IP。目前CDN频次控制单节点检测也不管用。如果用IP池，kubernetes僵尸网络，QPS可以控制到更低。&lt;/p&gt;
&lt;p&gt;腾讯云是增加了一个全国范围的流量限制，超过了返回404。但是这个不是封ip，会让所有人都访问不了。&lt;/p&gt;
&lt;p&gt;如果更倒霉，遇到 &lt;code&gt;challenge collapsar&lt;/code&gt;，那就准备给阿里云送钱吧。&lt;/p&gt;
&lt;h3&gt;内部原因&lt;/h3&gt;
&lt;p&gt;在排查问题过程中，我发现了一个本不该出现的IP。&lt;/p&gt;
&lt;p&gt;那个IP是阿里云VPC下的一个SNAT网关IP。这个IP的出现，只会说明一个问题：
&lt;strong&gt;kubernetes 内部容器通过公网访问OSS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;2018年09月04日 03时02分24秒&lt;/code&gt; ，我在公司内部文档是这么写的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/super-B/4.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;So,怪我文档写的不仔细咯？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/super-B/5.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;p&gt;在不改代码的前提下，解决方案有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建一个中转的&lt;code&gt;Nginx&lt;/code&gt;源站，回源OSS。对外返回 Brotli 编码的图片。&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;内网域名&lt;/strong&gt;读写OSS。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有条件改代码的话使用
&lt;a href=&#34;https://help.aliyun.com/document_detail/85117.html&#34;&gt;URL鉴权&lt;/a&gt;
。&lt;/p&gt;
&lt;h2&gt;其他费用&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;CDN&lt;/code&gt;是边缘计算。如果某个CDN节点上没有资源的副本，那么该节点就会回源，从而产生回源流量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/super-B/6.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;也就是说，如果在阿里云内部用公网回源OSS,一次请求有可能产生三种费用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CDN流量费用&lt;/li&gt;
&lt;li&gt;OSS下行流量费用&lt;/li&gt;
&lt;li&gt;CDN HTTPS请求数计费&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;网宿，请你争气一点&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;好好的一家公司，不推进项目，不投入研发，大股东整天想着减持，管理层变着名目和花样想把几个亿理财资金弄到自己腰包里，不思进取，气死沉沉，让股价一跌再跌，就问网宿，你怎么对得起，一直支持你的股民！！！&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;引用网友的评论，结合自身的实际用户体验，我希望网宿别那么快倒闭。&lt;/p&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;p&gt;中国商用带宽的流量费用过高。&lt;/p&gt;
&lt;h2&gt;参考链接&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://help.aliyun.com/document_detail/59636.html&#34;&gt;计量项和计费项&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.mbalib.com/zh-tw/5W1H%E5%88%86%E6%9E%90%E6%B3%95&#34;&gt;5W1H分析法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://connect.console.aliyun.com/connect/detail/144802&#34;&gt;阿里云CDN费用过高&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content>
  </entry>
  <entry>
    <title>Distributed Wives System</title>
    <author>
      <name>Zeusro</name>
      <uri>https://github.com/zeusro</uri>
    </author>
    <id>https://bullshitprogram.com/distributed-wives-system/</id>
    <updated>2020-04-24T09:13:31Z</updated>
    <published>2020-04-24T09:13:31Z</published>
    <content type="html">&lt;h2&gt;CAP 理论&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/Distributed-Wives-System/CAP.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可用性（Availability）&lt;/strong&gt;：睡觉的时候旁边有老婆A或者B，老婆数量越多，可用性越高。可用性的终极形态是“1对N群体运动”（参考罗某人）。满足高可用性的前提是 N ≥ 2 。高可用性也是分布式系统的基础。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分区容错性（Partition tolerance）&lt;/strong&gt;：老婆A不知道老婆B，她们信息不完全互通。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一致性（Consistency）&lt;/strong&gt; ：老婆A 知道老婆B 的存在，或者孩子知道自己爹妈是谁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最终一致性&lt;/strong&gt;：虽然有很多老婆，但最后她们都和谐共处。&lt;/p&gt;
&lt;p&gt;我们从历史的长河，来看各个时代的（分布式）老婆系统是怎么样的。&lt;/p&gt;
&lt;h2&gt;只知其母，不知其父&lt;/h2&gt;
&lt;p&gt;这种母系社会，应该叫&lt;a href=&#34;https://www.bullshitprogram.com/distributed-husband-system/&#34;&gt;分布式老公系统&lt;/a&gt;才对。
分布式老公系统，实现了高可用性和分区容错性。
一致性无法保障，所以生下来的娃不知道谁是爹。因此也确立了母亲在族群中的统领地位。&lt;/p&gt;
&lt;p&gt;老婆=1，所以不能叫分布式老婆系统。&lt;/p&gt;
&lt;h2&gt;父有一个，三妻四妾&lt;/h2&gt;
&lt;p&gt;在中国的封建时期。曾经流行这样一套系统。
不过这套系统也是有讲究的。三妻四妾中的“妻”包括嫡妻、偏妻、下妻等。“三”在古代还有“多”的意思。
三妻里面，正（髮）妻地位最高，所以叫做“娶”。其余平妻，专门辅佐髮妻。
至于妾，则用“納”。妾的地位更低。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;特性&lt;/th&gt;
          &lt;th&gt;是否实现&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;一致性&lt;/td&gt;
          &lt;td&gt;√&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;可用性&lt;/td&gt;
          &lt;td&gt;√&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;分区容错性&lt;/td&gt;
          &lt;td&gt;×（她们各住自己房间）&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;构建现代分布式老婆系统&lt;/h2&gt;
&lt;h3&gt;弱水三千，只取一瓢&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;亲爱的,我从你身上看到了整个世界。跟你在一起之后，我的生命变得完整。嫁给我吧，我会给你幸福的！&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;喜新厌旧，开始劈腿&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;老婆，她们只是我的姐妹，我只是玩玩而已。大家都是人，有什么生理需求都很正常。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;老婆A 的态度&lt;/h3&gt;
&lt;p&gt;第二个步骤过后，会有两条分支线。这取决于老婆A的态度。&lt;/p&gt;
&lt;h3&gt;自戴绿帽&lt;/h3&gt;
&lt;p&gt;自戴绿帽的合法方式是与他离婚，让他娶小三。但是事实上又在一起。或者做表面夫妻，假意原谅老公，让他继续在外面浪荡。&lt;/p&gt;
&lt;p&gt;离婚后又事实上在一起，叫做&lt;strong&gt;实现了最终一致性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;马斯克是实现分布式老婆系统的大成者。
他有一句名言：虽然我不知道那孩子爸爸是谁，但看在我这么有钱的份上，给她们母子一点钱吧。&lt;/p&gt;
&lt;p&gt;不过我看最近（2025-06）马斯克的气色有点差，感觉也快去地府报道了。&lt;/p&gt;
&lt;h3&gt;斩其祸根&lt;/h3&gt;
&lt;p&gt;在《School Days》，诚哥上了天台，故事的结局，大家也都知道了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/Distributed-Wives-System/school-days.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;来说一首诗祭奠一下诚哥吧：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;诚哥笑我胆子小，我笑诚哥死得早。 
你笑诚哥死得早，诚哥笑你日得少。 
诚哥笑你日得少，我笑诚哥日不了。 
你笑诚哥日不了，诚哥笑你胆子小。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;p&gt;只要你一心沉迷二次元，完美的分布式老婆系统还是可以实现的！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/Distributed-Wives-System/wives.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2&gt;参考链接&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E4%B8%8A%E5%B8%9D%E9%80%A0%E4%BA%BA&#34;&gt;上帝造人&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.moegirl.org/zh-hans/%E8%AF%9A%E5%93%A5%E6%AD%BB%E5%BE%97%E6%97%A9&#34;&gt;诚哥死得早&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ctwant.com/article/47365&#34;&gt;羅志祥40歲搞多P！「30秒抖動126下」衝刺片瘋傳　網全看傻&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kknews.cc/history/m46bxz.html&#34;&gt;揭秘：中國的妻妾制度，三妻四妾到底指的是哪三妻和哪四妾？&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content>
  </entry>
  <entry>
    <title>The Seed Of Robot —— Intelligent API Gateway</title>
    <author>
      <name>Zeusro</name>
      <uri>https://github.com/zeusro</uri>
    </author>
    <id>https://bullshitprogram.com/the-seed-of-robot/</id>
    <updated>2020-03-21T12:56:37Z</updated>
    <published>2020-03-21T12:56:37Z</published>
    <content type="html">&lt;h2&gt;冯·诺依曼结构的缺陷&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;数学家冯·诺依曼提出了计算机制造的三个基本原则，即采用二进制逻辑、程序存储执行以及计算机由五个部分组成（运算器、控制器、存储器、输入设备、输出设备），这套理论被称为冯·诺依曼体系结构。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;计算程序发展到现在，基本的架构从来未曾改变。无非是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;input --&amp;gt; process --&amp;gt; output&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;也就是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;电脑输入--&amp;gt; 程序处理 --&amp;gt; 结果导出&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;但这套体系一直都是有缺陷的。比如在这套体系里面，一直都无法解决精度缺失的问题，不管你怎么多线程，结果也是串行执行。&lt;/p&gt;
&lt;p&gt;这是一套相当落后的架构，但我们不得不使用他。并在他基础上逐渐改进，直至新的技术突破。&lt;/p&gt;
&lt;h2&gt;下一代机器人架构&lt;/h2&gt;
&lt;p&gt;按照 &lt;a href=&#34;https://github.com/p-program/The-Seed&#34;&gt;The-Seed&lt;/a&gt; 理念设计的机器人，架构应当是这样的：&lt;/p&gt;
&lt;p&gt;Input:&lt;/p&gt;
&lt;p&gt;手机输入，键盘输入，语音输入，意念输入&lt;/p&gt;
&lt;p&gt;Process:&lt;/p&gt;
&lt;p&gt;程序的处理逻辑&lt;/p&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;p&gt;程序的应答&lt;/p&gt;
&lt;p&gt;Influence:&lt;/p&gt;
&lt;p&gt;程序的应答对我们的影响&lt;/p&gt;
&lt;h2&gt;现行框架下的解&lt;/h2&gt;
&lt;p&gt;我们就只挑 &lt;code&gt;Process&lt;/code&gt; 来讲吧。按照&lt;a href=&#34;https://github.com/p-program/The-Seed/blob/master/world.md&#34;&gt;世界的定义&lt;/a&gt;，如果世界是不可解的，那么我们把分解为一个可解的世界就行。&lt;/p&gt;
&lt;p&gt;制造泛用性机器人是我们最终的目标，但我们可以先从解决特定可解问题入手。&lt;/p&gt;
&lt;p&gt;比如，我要造一个文档机器人，基于我的文档仓库问答。这个文档是这么定义的:&lt;/p&gt;
&lt;p&gt;文件名是&lt;code&gt;kubernetes.md&lt;/code&gt;,内容是&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;# 六 集群故障管理
## 6.1 节点问题
### 6.1.3  ImageGCFailed
&amp;gt; 
&amp;gt;   kubelet 可以清除未使用的容器和镜像。kubelet 在每分钟和每五分钟分别回收容器和镜像。
&amp;gt; 
&amp;gt;   [配置 kubelet 垃圾收集](https://k8smeetup.github.io/docs/concepts/cluster-administration/kubelet-garbage-collection/)
但是 kubelet 的垃圾回收有个问题,它只能回收那些未使用的镜像,有点像 `docker system prune`,然而观察发现,那些死掉的容器不是最大的问题,正在运行的容器才是更大的问题.如果ImageGCFailed一直发生,而容器使用的ephemeral-storage/hostpath(宿主目录)越发增多,最终将会导致更严重的DiskPressure问题,波及节点上所有容器.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这个问题里面，&amp;quot;kubernetes.md&amp;quot; 就是&amp;quot;世界&amp;quot;。这个世界解决了故障处理的可解子问题。&lt;/p&gt;
&lt;p&gt;那么当我向机器人提问 &lt;code&gt;ImageGCFailed&lt;/code&gt; 的时候，机器人认识到了这是 &amp;quot;kubernetes.md&amp;quot; 的问题，略微检索（elasticsearch），便能变成答案。&lt;/p&gt;
&lt;p&gt;“ML科学家”就不服了，他说你怎么知道机器人知道答案呢？&lt;/p&gt;
&lt;p&gt;其实答案也非常的简单。“继续分割这个世界，直至不能再分割”。问题不能解决，那就把它再分解，再特殊化一点。&lt;/p&gt;
&lt;p&gt;举个例子。我们用浏览器访问 &lt;a href=&#34;https://help.aliyun.com/product/85222.html&#34;&gt;阿里云的容器服务Kubernetes版&lt;/a&gt;，
实际上我们已经进入了 &lt;code&gt;Kubernetes&lt;/code&gt; 这一个世界，我们所问的问题，只会跟 &lt;code&gt;Kubernetes&lt;/code&gt; 这个产品相关联。&lt;/p&gt;
&lt;p&gt;所以，按照的现行技术框架下，这个问答机器人是这样的：&lt;/p&gt;
&lt;p&gt;文档消费者：&lt;/p&gt;
&lt;p&gt;文本输入 --&amp;gt; 机器人微服务 --&amp;gt; 检索已有数据（elasticsearch）--&amp;gt; 导出检索结果 --&amp;gt; 页面埋点，跟踪用户反馈以改进结果排序。&lt;/p&gt;
&lt;p&gt;文档生产者：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone&lt;/code&gt; 文档仓库 --&amp;gt; 程序结构化文档，将死的数据转换为可被理解并检索的数据，比如导入 elasticsearch。&lt;/p&gt;
&lt;p&gt;我们可以把所有阿里云产品的文档都丢到这个 elasticsearch 里面，一个产品一个 index，也可以分开做。&lt;/p&gt;
&lt;p&gt;这个结果看起来很不“智能”，并且很简陋。但关键在于各个组件之间可以替换，而且最关键的文档部分可以扩展（多个消息源采集器，导入elasticsearch）。面向终端的目前只是一个钉钉机器人，但这个机器人对应的后端微服务是可以替换的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;You can you up.No can&#39;t BB&lt;/code&gt;。不要妄想制造一台万能机器，先解决能解决的问题就行。时机成熟之后再替换。&lt;/p&gt;
&lt;p&gt;最终AI的客户端将会得到进化，他现在只是一个web接口，但是他可以升级成一个客户端，一个app，甚至一台手机，一个机器人。&lt;/p&gt;
&lt;p&gt;等我有心情了，再开发出来这个钉钉机器人吧，哈哈。&lt;/p&gt;
&lt;h2&gt;理想架构&lt;/h2&gt;
&lt;p&gt;手机输入，键盘输入，语音输入，意念输入
--&amp;gt;
微服务查找（计算资源即微服务，计算资源包括人和计算机）
--&amp;gt;
调用计算资源完成计算&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--&amp;gt;&lt;/code&gt; 表示数据的流动，是一种世界通讯的协议。&lt;/p&gt;
&lt;p&gt;微服务查找是一个拓展的概念，查找的结果基于搜索因子呈现，基于质量排序。比如，海贼王临死前留下了 &lt;code&gt;One Piece&lt;/code&gt;，只留给找到它的人。各路豪杰纷纷响应，世界由此进入大航海时代。&lt;/p&gt;
&lt;p&gt;调用微服务不一定只调用一个，我们可以并发地调用多个微服务，&lt;code&gt;One Piece&lt;/code&gt; 只留给最快找到它的人。现在的高德打车就是这么做的，我们可以发起多个平台的打车，单子只留给最快响应并接单的人。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/The-Seed-Of-Robot/one-piece.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2&gt;TODO&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;表达能力更强的程序语言&lt;/li&gt;
&lt;li&gt;新的世界级通讯协议&lt;/li&gt;
&lt;li&gt;VR技术&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参考链接&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;http://www.yinwang.org/blog-cn/2018/04/13/computer-science&lt;/li&gt;
&lt;li&gt;https://baike.baidu.com/item/%E5%86%AF%C2%B7%E8%AF%BA%E4%BE%9D%E6%9B%BC%E7%BB%93%E6%9E%84&lt;/li&gt;
&lt;/ol&gt;</content>
  </entry>
  <entry>
    <title>How To Do In Java</title>
    <author>
      <name>Zeusro</name>
      <uri>https://github.com/zeusro</uri>
    </author>
    <id>https://bullshitprogram.com/howtodoinjava/</id>
    <updated>2020-03-20T05:53:29Z</updated>
    <published>2020-03-20T05:53:29Z</published>
    <content type="html">&lt;p&gt;The point is to break the rule everyday.&lt;/p&gt;
&lt;h2&gt;Use Java 8 till the world ends&lt;/h2&gt;
&lt;p&gt;2032：I still use Java 8.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/HowToDoInJava/java-release.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Write once,run nowwhere&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/HowToDoInJava/write-once.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Use maven rather than gradle, install tons of dependencies even you just wanna hello world&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.2.4.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.2.4.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-beans --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-beans&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.2.4.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-web --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-web&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.2.4.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.2.4.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-test --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-test&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.2.4.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aop --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-aop&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.2.4.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.2.3.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
&amp;lt;/dependency&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;JVM is great！&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/HowToDoInJava/jvm.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2&gt;JVM optimization&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/HowToDoInJava/jvm-memory.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/acs/user/monitoragent/jre/bin/java -server 
-Xmx128m 
-Xms128m 
-Xmn70m 
-XX:SurvivorRatio=10 
-XX:PermSize=25m 
-XX:MaxPermSize=30m 
-XX:&#43;DisableExplicitGC 
-XX:&#43;UseConcMarkSweepGC 
-XX:&#43;CMSParallelRemarkEnabled 
-XX:&#43;UseCMSCompactAtFullCollection 
-XX:&#43;CMSClassUnloadingEnabled 
-XX:LargePageSizeInBytes=128m 
-XX:&#43;UseFastAccessorMethods 
-XX:&#43;UseCMSInitiatingOccupancyOnly 
-XX:CMSInitiatingOccupancyFraction=70 
-XX:&#43;UseParNewGC 
-verbose:gc 
-Xloggc:/acs/monitor/system/monitoragent/logs/gc.log 
-XX:&#43;PrintGCDetails 
-XX:&#43;PrintGCDateStamps 
-Duser.timezone=GMT&#43;8 
-Djava.endorsed.dirs= 
-classpath /acs/user/monitoragent/lib:/acs/user/monitoragent/lib/aliyun-openservices-sls-v0.3-inner-0.1.0.jar:/acs/user/monitoragent/lib/aliyun-openservices-with-mqs.1.0.12.jar:/acs/user/monitoragent/lib/commons-beanutils-1.8.3.jar:/acs/user/monitoragent/lib/commons-codec-1.4.jar:/acs/user/monitoragent/lib/commons-collections-3.2.1.jar:/acs/user/monitoragent/lib/commons-digester-1.8.jar:/acs/user/monitoragent/lib/commons-httpclient-3.1.jar:/acs/user/monitoragent/lib/commons-lang-2.6.jar:/acs/user/monitoragent/lib/commons-lang3-3.1.jar:/acs/user/monitoragent/lib/commons-logging-1.0.4.jar:/acs/user/monitoragent/lib/commons-validator-1.4.0.jar:/acs/user/monitoragent/lib/diamond-client-3.6.7.jar:/acs/user/monitoragent/lib/diamond-utils-3.1.3.jar:/acs/user/monitoragent/lib/ezmorph-1.0.6.jar:/acs/user/monitoragent/lib/fastjson-1.2.41.jar:/acs/user/monitoragent/lib/hamcrest-core-1.1.jar:/acs/user/monitoragent/lib/httpclient-4.2.1.jar:/acs/user/monitoragent/lib/httpcore-4.2.1.jar:/acs/user/monitoragent/lib/jackson-core-lgpl-1.9.6.jar:/acs/user/monitoragent/lib/jackson-mapper-lgpl-1.9.6.jar:/acs/user/monitoragent/lib/jdom-1.1.jar:/acs/user/monitoragent/lib/json-lib-2.4-jdk15.jar:/acs/user/monitoragent/lib/junit-4.10.jar:/acs/user/monitoragent/lib/log4j-1.2.17.jar:/acs/user/monitoragent/lib/mysql-connector-java-5.1.25.jar:/acs/user/monitoragent/lib/netty-all-4.0.36.Final.jar:/acs/user/monitoragent/lib/nginx.agent.jar:/acs/user/monitoragent/lib/ons-api-1.1.5.jar:/acs/user/monitoragent/lib/ons-client-1.1.5.jar:/acs/user/monitoragent/lib/protobuf-java-2.4.1.jar:/acs/user/monitoragent/lib/rocketmq-client-3.6.4.jar:/acs/user/monitoragent/lib/rocketmq-common-3.6.4.jar:/acs/user/monitoragent/lib/rocketmq-remoting-3.6.4.jar:/acs/user/monitoragent/lib/slf4j-api-1.7.5.jar:/acs/user/monitoragent/lib/slf4j-log4j12-1.7.5.jar:/acs/user/monitoragent/lib/test.junit-4.8.1.jar:/acs/user/monitoragent/lib/test.junit.hamcrest-1.1.jar: -Dagent.home=/acs/user/monitoragent com.alibaba.ace.nginx.agent.Startup /acs/user/monitoragent/conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More options, more KPI, more salary jobs!&lt;/p&gt;
&lt;h2&gt;Object boxing and unboxing&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  public static void f() {
        String[] a = new String[2];
        Object[] b = a;
        a[0] = &amp;quot;hi&amp;quot;;
        b[1] = Integer.valueOf(42);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Return in finally&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    static String a() {
        try {
            throw new RuntimeException(&amp;quot;a&amp;quot;);
        } catch (RuntimeException e) {
            return &amp;quot;d&amp;quot;;
        } catch (Exception e) {
            return &amp;quot;b&amp;quot;;
        } finally {
            return &amp;quot;c&amp;quot;;
        }
//        return &amp;quot;d&amp;quot;;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Use ==&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;        String s1 = new String(&amp;quot;cccc&amp;quot;);
        String s2 = new String(&amp;quot;cccc&amp;quot;);
        if(s1==s2){
            goto hell;
        }

        Integer a =127;
        Integer b = 127;
        System.out.println(a==b);//true

        Integer a1 = 128;
        Integer b1 = 128;
        System.out.println(a1==b1);//false
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Use / as much as you can&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.util.Scanner;
public class Exercise1 {
       public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        System.out.print(&amp;quot;Input an integer number: &amp;quot;);
        int n = in.nextInt();  		
        if (n &amp;lt;= 0) {
            System.out.print(&amp;quot;Input a correct number.&amp;quot;);
        }
		int x = 0;
        while (n != 1) {
            if (n % 5 == 0) {
                n /= 5;
            } else if (n % 3 == 0) {
                n /= 3;
            } else if (n % 2 == 0) {
                n /= 2;
            } else {
                System.out.print(&amp;quot;It is not an ugly number.&amp;quot;);
				x = 1;
				break;
            }
        }
        if (x==0)
		System.out.print(&amp;quot;It is an ugly number.&amp;quot;);
		System.out.print(&amp;quot;\n&amp;quot;);
	    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/image/post/HowToDoInJava/java-number-exercise-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Object.toString is awsome!&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String[] words = { “Hello”, “World” };
System.out.println(words); //[Ljava.lang.String;@45ee12a7
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Save file twice for guarantee&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;saveFile(fileName);
saveFile(fileName);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Sleep for further optimization&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// After our customers pay the last bill,then we will comment this.
Thread.sleep(30000)；
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;NullPointerException is your best friend!&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;{
    Integer n = null;
    if (n == 0) {
        System.out.println(&amp;quot;n == 0&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Dreaming about generics&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Vector&amp;lt;E&amp;gt; {
	private E e = new E(); // you&#39;re dreaming
    private E[] e = new E[10]; // you&#39;re dreaming
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Try, Try, Try&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public byte[] download(String url) {
        HttpGet httpGet = new HttpGet(url);
        try (CloseableHttpResponse response = client.execute(httpGet)) {
            if (404 == response.getStatusLine().getStatusCode()) {
                return null;
            }
            try (InputStream inputStream = response.getEntity().getContent()) {
                return readInputStream(inputStream);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            httpGet = null;
        }
        return null;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Love my wife like crazy&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.zeusro;
import java.util.Date;

public interface Wife {

    public void want(Float money);

    public void want(Float money,Object love);

    public void want(Object love,Float money);

    public void want(Object love, Float money, Date time);

}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;More code lines,more money&lt;/h2&gt;
&lt;p&gt;The 40-year-old Kobe Bryant still wakes up before the sun to go to the gym at 4 a.m.&lt;/p&gt;
&lt;p&gt;One day he asked IT engineers around him：&amp;quot;Have you ever seen LA at 4 a.m. ?&amp;quot;&lt;/p&gt;
&lt;p&gt;Go senior backend engineer : NO!&lt;/p&gt;
&lt;p&gt;C# senior backend engineer : NO!&lt;/p&gt;
&lt;p&gt;Kotlin senior engineer : NO!&lt;/p&gt;
&lt;p&gt;Java senior backend engineer : YES!I am still busy on generating get and set.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.util.Arrays;

public class DataExample {
  private final String name;
  private int age;
  private double score;
  private String[] tags;
  
  public DataExample(String name) {
    this.name = name;
  }
  
  public String getName() {
    return this.name;
  }
  
  void setAge(int age) {
    this.age = age;
  }
  
  public int getAge() {
    return this.age;
  }
  
  public void setScore(double score) {
    this.score = score;
  }
  
  public double getScore() {
    return this.score;
  }
  
  public String[] getTags() {
    return this.tags;
  }
  
  public void setTags(String[] tags) {
    this.tags = tags;
  }
  
  @Override public String toString() {
    return &amp;quot;DataExample(&amp;quot; &#43; this.getName() &#43; &amp;quot;, &amp;quot; &#43; this.getAge() &#43; &amp;quot;, &amp;quot; &#43; this.getScore() &#43; &amp;quot;, &amp;quot; &#43; Arrays.deepToString(this.getTags()) &#43; &amp;quot;)&amp;quot;;
  }
  
  protected boolean canEqual(Object other) {
    return other instanceof DataExample;
  }
  
  @Override public boolean equals(Object o) {
    if (o == this) return true;
    if (!(o instanceof DataExample)) return false;
    DataExample other = (DataExample) o;
    if (!other.canEqual((Object)this)) return false;
    if (this.getName() == null ? other.getName() != null : !this.getName().equals(other.getName())) return false;
    if (this.getAge() != other.getAge()) return false;
    if (Double.compare(this.getScore(), other.getScore()) != 0) return false;
    if (!Arrays.deepEquals(this.getTags(), other.getTags())) return false;
    return true;
  }
  
  @Override public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final long temp1 = Double.doubleToLongBits(this.getScore());
    result = (result*PRIME) &#43; (this.getName() == null ? 43 : this.getName().hashCode());
    result = (result*PRIME) &#43; this.getAge();
    result = (result*PRIME) &#43; (int)(temp1 ^ (temp1 &amp;gt;&amp;gt;&amp;gt; 32));
    result = (result*PRIME) &#43; Arrays.deepHashCode(this.getTags());
    return result;
  }
  
  public static class Exercise&amp;lt;T&amp;gt; {
    private final String name;
    private final T value;
    
    private Exercise(String name, T value) {
      this.name = name;
      this.value = value;
    }
    
    public static &amp;lt;T&amp;gt; Exercise&amp;lt;T&amp;gt; of(String name, T value) {
      return new Exercise&amp;lt;T&amp;gt;(name, value);
    }
    
    public String getName() {
      return this.name;
    }
    
    public T getValue() {
      return this.value;
    }
    
    @Override public String toString() {
      return &amp;quot;Exercise(name=&amp;quot; &#43; this.getName() &#43; &amp;quot;, value=&amp;quot; &#43; this.getValue() &#43; &amp;quot;)&amp;quot;;
    }
    
    protected boolean canEqual(Object other) {
      return other instanceof Exercise;
    }
    
    @Override public boolean equals(Object o) {
      if (o == this) return true;
      if (!(o instanceof Exercise)) return false;
      Exercise&amp;lt;?&amp;gt; other = (Exercise&amp;lt;?&amp;gt;) o;
      if (!other.canEqual((Object)this)) return false;
      if (this.getName() == null ? other.getValue() != null : !this.getName().equals(other.getName())) return false;
      if (this.getValue() == null ? other.getValue() != null : !this.getValue().equals(other.getValue())) return false;
      return true;
    }
    
    @Override public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      result = (result*PRIME) &#43; (this.getName() == null ? 43 : this.getName().hashCode());
      result = (result*PRIME) &#43; (this.getValue() == null ? 43 : this.getValue().hashCode());
      return result;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Set&amp;lt;Integer&amp;gt; s = new HashSet&amp;lt;&amp;gt;();
s.add(1);
s.add(2);
s.add(3);
s.add(4);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;https://www.w3resource.com/java-exercises/numbers/java-number-exercise-1.php&lt;/li&gt;
&lt;li&gt;https://blog.csdn.net/qq_36785612/article/details/86499466&lt;/li&gt;
&lt;li&gt;https://blog.csdn.net/u011928958/article/details/74999256&lt;/li&gt;
&lt;li&gt;https://www.jianshu.com/p/bbf8c28101e9&lt;/li&gt;
&lt;li&gt;https://zhuanlan.zhihu.com/p/29010605&lt;/li&gt;
&lt;li&gt;https://en.wikipedia.org/wiki/Java_version_history&lt;/li&gt;
&lt;/ol&gt;</content>
  </entry>
  <entry>
    <title>Superhero in China 🇨🇳</title>
    <author>
      <name>Zeusro</name>
      <uri>https://github.com/zeusro</uri>
    </author>
    <id>https://bullshitprogram.com/fengqingyang/</id>
    <updated>2020-03-19T15:50:20Z</updated>
    <published>2020-03-19T15:50:20Z</published>
    <content type="html">&lt;p&gt;Hello,everyone,I am Zeusro who was born and live in China.&lt;/p&gt;
&lt;p&gt;I have a question for you guys:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What we talk about when we talk about Superheroes ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You might ask me back:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What a silly question! Have you not heard about Marvel Universe ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Well, I watched the whole &lt;The Avengers&gt; , and I felt so sad when seeing Tony died.&lt;/p&gt;
&lt;p&gt;But you know,Tony wasn&#39;t born in China.He is an American superhero, not Chinese superhero.&lt;/p&gt;
&lt;p&gt;So, let me introduce one of our Chinese superheroes —— 风清扬.&lt;/p&gt;
&lt;p&gt;Before that, I have to say that 李小龙(Bruce Jun Fan Lee) is not a superhero. He was just a  person who fought better than normal Chinese people. I respect him from my heart.&lt;/p&gt;
&lt;p&gt;Superheroes should be a special symbol which do not exist in this real world.But their legend inspire us to fight against this world.&lt;/p&gt;
&lt;p&gt;风清扬 (FengQingYang) only shows up in the chapter 10th of a Chinese novel named &amp;lt;笑傲江湖&amp;gt;（The Smiling, Proud Wanderer）. It was written by 金庸（Louis Cha Leung-yung）. 金庸 is someone like Stan Lee for some Chinese people.&lt;/p&gt;
&lt;p&gt;I would try to make some simple translation, with some live codes and imagination, to show you who 风清扬 is.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大丈夫行事，爱怎样便怎，行云流水，任意所至，甚么武林规矩，门派教条，全都是放他妈的狗臭屁!&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Big man do what they want,go where they want to go.All guidelines are bullshit.&lt;/p&gt;&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;

void func1 () {
	func2();
}

void func2 () {
	printf(&amp;quot;hello&amp;quot;);
}

int main() {
	func1();
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;单以武学而论，这些魔教长老们也不能说真正已窥上乘武学之门。他们不懂 得，招数是死的，发招之人却是活的。死招数破 得再妙，遇上了活招数，免不了缚手缚脚，只有 任人屠戮。这个‘活’字，你要牢牢记住了。学招 时要活学，使招时要活使。倘若拘泥不化，便练 熟了几千万手绝招，遇上了真正高手，终究还是 给人家破得干干净净。&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;五岳剑派中各有无数蠢才，以为将师父传下来的剑招学得精熟，自然而然便成 高手，哼哼，熟读唐诗三百首，不会作诗也会吟!熟读了人家诗句，做几首打油诗是可以的， 但若不能自出机抒，能成大诗人么?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;These people who call themselves best engineers in this world. They sell you design patterns，OOP, TDD, DDD, Java-Coding-Guidelines,virtual machine, AI, Autopilot, machine learning and so on. But they are not actually the best players in this world.They do not realize the code is dead，but we are alive. So when they face new problems，they actually do not know what to do. If you get stuck in the dead concept, you will never become a truth hacker. (&lt;strong&gt;warning: I do not translate as the book says&lt;/strong&gt;)&lt;/p&gt;&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define TRUE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;活学活使，只是第一步。要做 到出手无招，那才真是踏入了高手的境界。你说 ‘各招浑成，敌人便无法可破’，这句话还只说对 了一小半。不是‘浑成’，而是根本无招。你的剑 招使得再浑成，只要有迹可寻，敌人便有隙可 乘。但如你根本并无招式，敌人如何来破你的招式?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;No code,no bug.The truth swordsman writes no code，so no one can destroy him.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;https://github.com/kelseyhightower/nocode&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一切须当顺其自然。行乎其不得不行，止乎其不得不止，倘若串不成一起，也就罢了，总之不可有半点勉强。&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Code whatever you like.If you feel tired , just close the computer and go to bed.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;独孤九剑，有进无退! 招招都是进攻，攻敌之不得不守，自己当然不用守了。&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The best ways to code is to code without any code review.&lt;/p&gt;&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected function getCacheAdvertList($keyList)
    {
        $advertList = [];
        //len(keyList)&amp;gt;100，it will read Redis for over 100 times
        foreach ($keyList as $ruleName =&amp;gt; $key) {
            $advert = RedisCacheUtil::get($key);
            $advertList[$ruleName] = $advert !== false ? $advert : [];
            $advertList[$ruleName] = $this-&amp;gt;formatAdvert($advertList[$ruleName]);
        }

        return $advertList;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;你倒也不可妄自菲薄，独孤大侠是绝顶聪明之人，学他的剑法，要旨是在一个 ‘悟’字，决不在死记硬记。等到通晓了这九剑的 剑意，则无所施而不可，便是将全部变化尽数忘 记，也不相干，临敌之际，更是忘记得越干净彻底，越不受原来剑法的拘束。&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Feel free even you forget the API. Thinking is the most important thing  while learning.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;As a matter of fact, 风清扬 taught 令狐冲 (LingHuChong) how to become a truth swordsman in the book.&lt;/p&gt;
&lt;p&gt;He is the different kind of superhero. He is my Gandalf who teaches me coding.&lt;/p&gt;
&lt;p&gt;He belongs to China, without no doubt.&lt;/p&gt;
&lt;p&gt;Yes, China does have our own superheroes.You know nothing because you don&#39;t learn our culture.&lt;/p&gt;</content>
  </entry>
</feed>
